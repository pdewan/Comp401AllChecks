//START OF FILE: src/grail/abasehistory.java
package grail;

import grail.interfaces.BaseHistory;
import grail.interfaces.Token;
import util.annotations.StructurePattern;
import util.annotations.StructurePatternNames;

@StructurePattern(StructurePatternNames.VECTOR_PATTERN)
public class ABaseHistory implements BaseHistory {
	
	
	//This collection has a fixed maximum size.
	public static final int MAX_SIZE = 50;
	

	// The underlying array to store the elements
	protected Token[] contents = new Token[MAX_SIZE];
	
	// number of filled elements
	protected int size = 0;	// number of filled elements (protected access)
	
	// Number of filled elements
	@Override
	public int size() {
		return size;
	}
	
	@Override
	public Token elementAt (int index) {
		return contents[index];
	}

	protected boolean isFull() {
		return size == MAX_SIZE;
	}
	
	@Override
	public void addElement(Token element) {
		if (isFull()) {
			System.out.println("Cannot add item to a full history");
		} else {
			contents[size] = element;
			size++;
		}
	} 	
	
}
//END OF FILE
//START OF FILE: src/grail/clearablehistory.java
package grail;

import grail.interfaces.ClearableHistoryInterface;
import grail.interfaces.Token;
import util.annotations.StructurePattern;
import util.annotations.StructurePatternNames;
import util.annotations.Tags;

@StructurePattern(StructurePatternNames.VECTOR_PATTERN)
@Tags({"ClearableHistory"})
public class ClearableHistory extends ABaseHistory implements ClearableHistoryInterface {

	@Override
	public void clear(){
		size = 0;
		contents = new Token[MAX_SIZE];
	}
}
//END OF FILE
//START OF FILE: src/grail/scannerbean.java
package grail;

import util.annotations.EditablePropertyNames;
import util.annotations.PropertyNames;
import util.annotations.StructurePattern;
import util.annotations.StructurePatternNames;
import util.annotations.Tags;

import java.util.Iterator;

import grail.commandBeans.ApproachCommand;
import grail.commandBeans.FailCommand;
import grail.commandBeans.MoveCommand;
import grail.commandBeans.PassCommand;
import grail.commandBeans.RepeatCommand;
import grail.commandBeans.SayCommand;
import grail.extraCommandBeans.CallCommand;
import grail.extraCommandBeans.DefineCommand;
import grail.extraCommandBeans.ProceedAllCommand;
import grail.extraCommandBeans.RedoCommand;
import grail.extraCommandBeans.RotateLeftArmCommand;
import grail.extraCommandBeans.RotateRightArmCommand;
import grail.extraCommandBeans.SleepCommand;
import grail.extraCommandBeans.ThreadCommand;
import grail.extraCommandBeans.UndoCommand;
import grail.extraCommandBeans.WaitCommand;
import grail.interfaces.ClearableHistoryInterface;
import grail.interfaces.ScannerBeanInterface;
import grail.interfaces.Token;
import grail.tokenBeans.EndToken;
import grail.tokenBeans.MinusToken;
import grail.tokenBeans.NumberToken;
import grail.tokenBeans.PlusToken;
import grail.tokenBeans.QuoteToken;
import grail.tokenBeans.StartToken;
import grail.tokenBeans.WordToken;
import mp.scanner.ScanningIterator;


/**
 * A "Bean" object whose setter for scannedString prints the tokens and their types.
 * @author Semion
 *
 */
@Tags({"ScannerBean"})
@StructurePattern(StructurePatternNames.BEAN_PATTERN)
@PropertyNames({"ScannedString", "Tokens", "Errors", "TokenList"})
@EditablePropertyNames({"ScannedString"})
public class ScannerBean implements ScannerBeanInterface{

	private String scannedString = "";
	
	private ClearableHistoryInterface tokenList = new ClearableHistory();
	
	private Token[] tokenStorage = new Token[100];
	private Token[] tokens = {};
	private int numTokens = 0;
	
	private String[] errorStorage = new String[100];
	private String[] errors = {};
	private int numErrors = 0;
	
	@Override
	public String getScannedString(){
		return scannedString;
	};
	
	@Override
	public void setScannedString(String s){
		scanString(s);
		scannedString = s;
	};
	
	@Override
	public Token[] getTokens(){
		return tokens;
	}
	
	@Override	
	public String[] getErrors(){
		return errors;
	}
	
	@Override
	public ClearableHistoryInterface getTokenList(){
		return tokenList;
	}
	
	/**
	 * Produces output from each string
	 */
	private void scanString(String s){
		
		// Reset arrays
		numTokens = 0;
		numErrors = 0;
		tokenList.clear();
		
		Iterator<String> iterator = new ScanningIterator(s);
		
		Token tokenObject = null;	// used to grab each token
		
		// Take each space-delimited token
		while (iterator.hasNext()){
			String tokenString = iterator.next();

			boolean valid = true; // will be used to mark invalid tokens
			
			// Check for number
			if (Character.isDigit(tokenString.charAt(0))){
				valid = isValidNumber(tokenString);
				if (valid){
					tokenList.addElement(new NumberToken(tokenString));
					tokenObject = new NumberToken(tokenString);
				}
				
			// Check for word
			} else if (Character.isLetter(tokenString.charAt(0))){
				valid = isValidWord(tokenString);
				if (valid){
					tokenObject = constructCommandOrWord(tokenString);
				}
			
			// Check for quoted string
			} else if (tokenString.charAt(0) == '\"'){
				
				// The only invalid token would be an empty quoted string
				if (tokenString.length() <= "\"\"".length()){
					valid = false;
				}
				
				if (valid){
					
					// Trim quotation marks off the ends of the token
					tokenString = tokenString.substring(1, tokenString.length()-1);

					tokenList.addElement(new QuoteToken(tokenString));
					tokenObject = new QuoteToken(tokenString);
				}
			
			// Check for plus token
			} else if ("+".equals(tokenString)){
				tokenList.addElement(new PlusToken(tokenString));
				tokenObject = new PlusToken(tokenString);
			
			// Check for minus token
			} else if ("-".equals(tokenString)){
				tokenList.addElement(new MinusToken(tokenString));
				tokenObject = new MinusToken(tokenString);
			
			// Check for "start" token
			} else if ("{".equals(tokenString)){
				tokenList.addElement(new StartToken(tokenString));
				tokenObject = new StartToken(tokenString);
				
			// Check for "end" token
			} else if ("}".equals(tokenString)){
				tokenList.addElement(new EndToken(tokenString));
				tokenObject = new EndToken(tokenString);
				
			// Otherwise invalid
			} else{
				valid = false;
			}
			
			if (valid){
				tokenStorage[numTokens] = tokenObject;
				++numTokens;
			} else {
				errorStorage[numErrors] = tokenString;
				++numErrors;
			}
		}//end grabbing tokens
		
		// Compress arrays
		tokens = new Token[numTokens];
		for (int i = 0; i < numTokens; ++i){
			tokens[i] = tokenStorage[i];
		}
		
		errors = new String[numErrors];
		for (int i = 0; i < numErrors; ++i){
			errors[i] = errorStorage[i];
		}
	}//end scanString()
	
	/**
	 * Constructs proper command from word, or just a word if no command matches.
	 * Assumes that word is non-empty and valid.
	 * From A6 onward, also stores a copy of the token in tokenList.
	 * 
	 * @param tokenString
	 * @return proper command object, or word object otherwise
	 */
	private Token constructCommandOrWord(String tokenString) {
		
		if ("approach".equalsIgnoreCase(tokenString)){
			tokenList.addElement(new ApproachCommand(tokenString));
			return new ApproachCommand(tokenString);
			
		}else if ("fail".equalsIgnoreCase(tokenString)){

			tokenList.addElement(new FailCommand(tokenString));
			return new FailCommand(tokenString);
			
		}else if ("move".equalsIgnoreCase(tokenString)){

			tokenList.addElement(new MoveCommand(tokenString));
			return new MoveCommand(tokenString);
			
		}else if ("pass".equalsIgnoreCase(tokenString)){

			tokenList.addElement(new PassCommand(tokenString));
			return new PassCommand(tokenString);
			
		}else if ("repeat".equalsIgnoreCase(tokenString)){
			tokenList.addElement(new RepeatCommand(tokenString));
			return new RepeatCommand(tokenString);
			
		}else if ("say".equalsIgnoreCase(tokenString)){
			tokenList.addElement(new SayCommand(tokenString));
			return new SayCommand(tokenString);
			
		}else if ("call".equalsIgnoreCase(tokenString)){
			tokenList.addElement(new CallCommand(tokenString));
			return new CallCommand(tokenString);
			
		}else if ("define".equalsIgnoreCase(tokenString)){
			tokenList.addElement(new DefineCommand(tokenString));
			return new DefineCommand(tokenString);
			
		}else if ("proceedall".equalsIgnoreCase(tokenString)){
			tokenList.addElement(new ProceedAllCommand(tokenString));
			return new ProceedAllCommand(tokenString);
			
		}else if ("redo".equalsIgnoreCase(tokenString)){
			tokenList.addElement(new RedoCommand(tokenString));
			return new RedoCommand(tokenString);
			
		}else if ("rotateleftarm".equalsIgnoreCase(tokenString)){
			tokenList.addElement(new RotateLeftArmCommand(tokenString));
			return new RotateLeftArmCommand(tokenString);
			
		}else if ("rotaterightarm".equalsIgnoreCase(tokenString)){
			tokenList.addElement(new RotateRightArmCommand(tokenString));
			return new RotateRightArmCommand(tokenString);
			
		}else if ("sleep".equalsIgnoreCase(tokenString)){
			tokenList.addElement(new SleepCommand(tokenString));
			return new SleepCommand(tokenString);
			
		}else if ("thread".equalsIgnoreCase(tokenString)){
			tokenList.addElement(new ThreadCommand(tokenString));
			return new ThreadCommand(tokenString);
			
		}else if ("undo".equalsIgnoreCase(tokenString)){
			tokenList.addElement(new UndoCommand(tokenString));
			return new UndoCommand(tokenString);
			
		}else if ("wait".equalsIgnoreCase(tokenString)){
			tokenList.addElement(new WaitCommand(tokenString));
			return new WaitCommand(tokenString);
		}
		
		// If none matched, return generic word
		tokenList.addElement(new WordToken(tokenString));
		return new WordToken(tokenString);
	}

	private static boolean isValidWord(String s){
		
		// Assume correct to begin with
		boolean validity = true;
		
		// Go through and stop at any invalid character
		for (int i = 0; i < s.length(); ++i){
			if (!Character.isLetter(s.charAt(i))){
				validity = false;
				break;
			}
		}
		return validity;
	}
	
	private static boolean isValidNumber(String s){
		
		// Assume correct to begin with
		boolean validity = true;
		
		// Go through and stop at any invalid character
		for (int i = 0; i < s.length(); ++i){
			if (!Character.isDigit(s.charAt(i))){
				validity = false;
				break;
			}
		}
		return validity;
	}
}//end class
//END OF FILE
//START OF FILE: src/grail/commandbeans/approachcommand.java
package grail.commandBeans;

import grail.tokenBeans.WordToken;
import util.annotations.EditablePropertyNames;
import util.annotations.PropertyNames;
import util.annotations.StructurePattern;
import util.annotations.StructurePatternNames;
import util.annotations.Tags;

@Tags({"Approach"})
@StructurePattern(StructurePatternNames.BEAN_PATTERN)
@PropertyNames({"Input", "Value"})
@EditablePropertyNames({"Input"})
public class ApproachCommand extends WordToken {

	public ApproachCommand(String input) {
		super(input);
	}
	
}
//END OF FILE
//START OF FILE: src/grail/commandbeans/failcommand.java
package grail.commandBeans;

import grail.tokenBeans.WordToken;
import util.annotations.EditablePropertyNames;
import util.annotations.PropertyNames;
import util.annotations.StructurePattern;
import util.annotations.StructurePatternNames;
import util.annotations.Tags;

@Tags({"Fail"})
@StructurePattern(StructurePatternNames.BEAN_PATTERN)
@PropertyNames({"Input", "Value"})
@EditablePropertyNames({"Input"})
public class FailCommand extends WordToken {

	public FailCommand(String input) {
		super(input);
	}

}
//END OF FILE
//START OF FILE: src/grail/commandbeans/movecommand.java
package grail.commandBeans;

import grail.tokenBeans.WordToken;
import util.annotations.EditablePropertyNames;
import util.annotations.PropertyNames;
import util.annotations.StructurePattern;
import util.annotations.StructurePatternNames;
import util.annotations.Tags;

@Tags({"Move"})
@StructurePattern(StructurePatternNames.BEAN_PATTERN)
@PropertyNames({"Input", "Value"})
@EditablePropertyNames({"Input"})
public class MoveCommand extends WordToken {

	public MoveCommand(String input) {
		super(input);
	}

}
//END OF FILE
//START OF FILE: src/grail/commandbeans/passcommand.java
package grail.commandBeans;

import grail.tokenBeans.WordToken;
import util.annotations.EditablePropertyNames;
import util.annotations.PropertyNames;
import util.annotations.StructurePattern;
import util.annotations.StructurePatternNames;
import util.annotations.Tags;

@Tags({"Pass"})
@StructurePattern(StructurePatternNames.BEAN_PATTERN)
@PropertyNames({"Input", "Value"})
@EditablePropertyNames({"Input"})
public class PassCommand extends WordToken {

	public PassCommand(String input) {
		super(input);
	}

}
//END OF FILE
//START OF FILE: src/grail/commandbeans/repeatcommand.java
package grail.commandBeans;

import grail.tokenBeans.WordToken;
import util.annotations.EditablePropertyNames;
import util.annotations.PropertyNames;
import util.annotations.StructurePattern;
import util.annotations.StructurePatternNames;
import util.annotations.Tags;

@Tags({"Repeat"})
@StructurePattern(StructurePatternNames.BEAN_PATTERN)
@PropertyNames({"Input", "Value"})
@EditablePropertyNames({"Input"})
public class RepeatCommand extends WordToken {

	public RepeatCommand(String input) {
		super(input);
	}

}
//END OF FILE
//START OF FILE: src/grail/commandbeans/saycommand.java
package grail.commandBeans;

import grail.tokenBeans.WordToken;
import util.annotations.EditablePropertyNames;
import util.annotations.PropertyNames;
import util.annotations.StructurePattern;
import util.annotations.StructurePatternNames;
import util.annotations.Tags;

@Tags({"Say"})
@StructurePattern(StructurePatternNames.BEAN_PATTERN)
@PropertyNames({"Input", "Value"})
@EditablePropertyNames({"Input"})
public class SayCommand extends WordToken {

	public SayCommand(String input) {
		super(input);
	}

}
//END OF FILE
//START OF FILE: src/grail/extracommandbeans/callcommand.java
package grail.extraCommandBeans;

import grail.tokenBeans.WordToken;
import util.annotations.EditablePropertyNames;
import util.annotations.PropertyNames;
import util.annotations.StructurePattern;
import util.annotations.StructurePatternNames;
import util.annotations.Tags;

@Tags({"Call"})
@StructurePattern(StructurePatternNames.BEAN_PATTERN)
@PropertyNames({"Input", "Value"})
@EditablePropertyNames({"Input"})
public class CallCommand extends WordToken {

	public CallCommand(String input) {
		super(input);
	}

}
//END OF FILE
//START OF FILE: src/grail/extracommandbeans/definecommand.java
package grail.extraCommandBeans;

import grail.tokenBeans.WordToken;
import util.annotations.EditablePropertyNames;
import util.annotations.PropertyNames;
import util.annotations.StructurePattern;
import util.annotations.StructurePatternNames;
import util.annotations.Tags;

@Tags({"Define"})
@StructurePattern(StructurePatternNames.BEAN_PATTERN)
@PropertyNames({"Input", "Value"})
@EditablePropertyNames({"Input"})
public class DefineCommand extends WordToken {

	public DefineCommand(String input) {
		super(input);
	}

}
//END OF FILE
//START OF FILE: src/grail/extracommandbeans/proceedallcommand.java
package grail.extraCommandBeans;

import grail.tokenBeans.WordToken;
import util.annotations.EditablePropertyNames;
import util.annotations.PropertyNames;
import util.annotations.StructurePattern;
import util.annotations.StructurePatternNames;
import util.annotations.Tags;

@Tags({"ProceedAll"})
@StructurePattern(StructurePatternNames.BEAN_PATTERN)
@PropertyNames({"Input", "Value"})
@EditablePropertyNames({"Input"})
public class ProceedAllCommand extends WordToken {

	public ProceedAllCommand(String input) {
		super(input);
	}

}
//END OF FILE
//START OF FILE: src/grail/extracommandbeans/redocommand.java
package grail.extraCommandBeans;

import grail.tokenBeans.WordToken;
import util.annotations.EditablePropertyNames;
import util.annotations.PropertyNames;
import util.annotations.StructurePattern;
import util.annotations.StructurePatternNames;
import util.annotations.Tags;

@Tags({"Redo"})
@StructurePattern(StructurePatternNames.BEAN_PATTERN)
@PropertyNames({"Input", "Value"})
@EditablePropertyNames({"Input"})
public class RedoCommand extends WordToken {

	public RedoCommand(String input) {
		super(input);
	}

}
//END OF FILE
//START OF FILE: src/grail/extracommandbeans/rotateleftarmcommand.java
package grail.extraCommandBeans;

import grail.tokenBeans.WordToken;
import util.annotations.EditablePropertyNames;
import util.annotations.PropertyNames;
import util.annotations.StructurePattern;
import util.annotations.StructurePatternNames;
import util.annotations.Tags;

@Tags({"RotateLeftArm"})
@StructurePattern(StructurePatternNames.BEAN_PATTERN)
@PropertyNames({"Input", "Value"})
@EditablePropertyNames({"Input"})
public class RotateLeftArmCommand extends WordToken {

	public RotateLeftArmCommand(String input) {
		super(input);
	}

}
//END OF FILE
//START OF FILE: src/grail/extracommandbeans/rotaterightarmcommand.java
package grail.extraCommandBeans;

import grail.tokenBeans.WordToken;
import util.annotations.EditablePropertyNames;
import util.annotations.PropertyNames;
import util.annotations.StructurePattern;
import util.annotations.StructurePatternNames;
import util.annotations.Tags;

@Tags({"RotateRightArm"})
@StructurePattern(StructurePatternNames.BEAN_PATTERN)
@PropertyNames({"Input", "Value"})
@EditablePropertyNames({"Input"})
public class RotateRightArmCommand extends WordToken {

	public RotateRightArmCommand(String input) {
		super(input);
	}

}
//END OF FILE
//START OF FILE: src/grail/extracommandbeans/sleepcommand.java
package grail.extraCommandBeans;

import grail.tokenBeans.WordToken;
import util.annotations.EditablePropertyNames;
import util.annotations.PropertyNames;
import util.annotations.StructurePattern;
import util.annotations.StructurePatternNames;
import util.annotations.Tags;

@Tags({"Sleep"})
@StructurePattern(StructurePatternNames.BEAN_PATTERN)
@PropertyNames({"Input", "Value"})
@EditablePropertyNames({"Input"})
public class SleepCommand extends WordToken {

	public SleepCommand(String input) {
		super(input);
	}

}
//END OF FILE
//START OF FILE: src/grail/extracommandbeans/threadcommand.java
package grail.extraCommandBeans;

import grail.tokenBeans.WordToken;
import util.annotations.EditablePropertyNames;
import util.annotations.PropertyNames;
import util.annotations.StructurePattern;
import util.annotations.StructurePatternNames;
import util.annotations.Tags;

@Tags({"Thread"})
@StructurePattern(StructurePatternNames.BEAN_PATTERN)
@PropertyNames({"Input", "Value"})
@EditablePropertyNames({"Input"})
public class ThreadCommand extends WordToken {

	public ThreadCommand(String input) {
		super(input);
	}

}
//END OF FILE
//START OF FILE: src/grail/extracommandbeans/undocommand.java
package grail.extraCommandBeans;

import grail.tokenBeans.WordToken;
import util.annotations.EditablePropertyNames;
import util.annotations.PropertyNames;
import util.annotations.StructurePattern;
import util.annotations.StructurePatternNames;
import util.annotations.Tags;

@Tags({"Undo"})
@StructurePattern(StructurePatternNames.BEAN_PATTERN)
@PropertyNames({"Input", "Value"})
@EditablePropertyNames({"Input"})
public class UndoCommand extends WordToken {

	public UndoCommand(String input) {
		super(input);
	}

}
//END OF FILE
//START OF FILE: src/grail/extracommandbeans/waitcommand.java
package grail.extraCommandBeans;

import grail.tokenBeans.WordToken;
import util.annotations.EditablePropertyNames;
import util.annotations.PropertyNames;
import util.annotations.StructurePattern;
import util.annotations.StructurePatternNames;
import util.annotations.Tags;

@Tags({"Wait"})@StructurePattern(StructurePatternNames.BEAN_PATTERN)
@PropertyNames({"Input", "Value"})
@EditablePropertyNames({"Input"})
public class WaitCommand extends WordToken {

	public WaitCommand(String input) {
		super(input);
	}

}
//END OF FILE
//START OF FILE: src/grail/graphics/avatar.java
package grail.graphics;

import grail.interfaces.AvatarInterface;
import grail.interfaces.ImageInterface;
import grail.interfaces.RotatingLineInterface;
import grail.interfaces.StringShapeInterface;
import grail.interfaces.VShapeInterface;
import util.annotations.EditablePropertyNames;
import util.annotations.PropertyNames;
import util.annotations.StructurePattern;
import util.annotations.StructurePatternNames;
import util.annotations.Tags;
import util.annotations.Visible;

@StructurePattern(StructurePatternNames.BEAN_PATTERN)
@Tags({"Avatar"})
@PropertyNames({"X", "Y","Head", "Legs", "Arms", "Torso", "StringShape"})
@EditablePropertyNames({"X", "Y"})
public class Avatar implements AvatarInterface {

	private static final double TORSO_LENGTH = 80;
	private static final double ARMS_LENGTH = 80;
	private static final double LEGS_LENGTH = 80;
	private static final double TORSO_ANGLE = Math.PI/2;
	
	// The anchor is between the feet
	private int x;
	private int y;
	
	private ImageInterface head;
	private VShapeInterface legs;
	private VShapeInterface arms;
	private RotatingLineInterface torso;
	private StringShapeInterface stringShape;
	
	public Avatar(ImageInterface head){
		this.head = head;
		
		// Construct other parts
		torso = new RotatingLine(0, 0, TORSO_LENGTH, TORSO_ANGLE);
		arms = new VShape(0, 0, ARMS_LENGTH);
		legs = new VShape(0, 0, LEGS_LENGTH);
		stringShape = new StringShape(0, 0, "");
		
		// Figure out the postion of the avatar anchor
		int xPos = head.getX() + (head.getWidth()/2);
		int yPos = (int)(head.getY() + head.getHeight()
						+ torso.getRadius() 
						+ legs.getRightLine().getHeight());	
		
		// Use setters to build character
		setX(xPos);
		setY(yPos);
	}
	
	public Avatar(int xPos, int yPos, String imageFileName){
		// Construct parts
		head = new Image(0, 0, imageFileName);
		torso = new RotatingLine(0, 0, TORSO_LENGTH, TORSO_ANGLE);
		arms = new VShape(0, 0, ARMS_LENGTH);
		legs = new VShape(0, 0, LEGS_LENGTH);
		stringShape = new StringShape(0, 0, "");
		
		// Use setters to build character
		setX(xPos);
		setY(yPos);
	}
	
	@Visible(false)
	@Override
	public void setX(int newX) {
		
		x = newX;
		
		// Place the character:
		// Since character is upright, everything is already
		// centered except the head and utterance
		legs.setX(newX);
		torso.setX(newX);
		arms.setX(newX);
		
		head.setX(newX-(head.getWidth())/2);
		stringShape.setX(head.getX() + head.getWidth());
	}

	@Visible(false)
	@Override
	public int getX() {
		return x;
	}
	
	@Visible(false)
	@Override
	public void setY(int newY) {
		
		y = newY;
		
		// Place the character:
		legs.setY(newY-legs.getRightLine().getHeight());
		
		int torsoTop = legs.getY()-torso.getHeight();
		torso.setY(torsoTop);
		arms.setY(torsoTop);
		
		// Head anchor is at its top, so adjust
		head.setY(torsoTop - head.getHeight());
		
		stringShape.setY(head.getY());
	}

	@Visible(false)
	@Override
	public int getY() {
		return y;
	}

	@Override
	public StringShapeInterface getStringShape() {
		return stringShape;
	}

	@Override
	public ImageInterface getHead() {
		return head;
	}

	@Override
	public VShapeInterface getArms() {
		return arms;
	}

	@Override
	public VShapeInterface getLegs() {
		return legs;
	}

	@Override
	public RotatingLineInterface getTorso() {
		return torso;
	}

	@Tags({"move"})
	@Override
	public void move(int changeInX, int changeInY) {
		setX(x+changeInX);
		setY(y+changeInY);
	}

	@Tags({"scale"})
	@Override
	public void scale(double scalar) {
		
		// Ceiling necessary because otherwise small changes are not visible
		head.setHeight((int)Math.ceil(head.getHeight() * scalar));
		head.setWidth((int)Math.ceil(head.getWidth()*scalar));
		
		legs.setLinesLength(legs.getLinesLength() * scalar);
		arms.setLinesLength(arms.getLinesLength() * scalar);
		torso.setRadius(torso.getRadius() * scalar);
		
		setX(x);
		setY(y);
	}
}
//END OF FILE
//START OF FILE: src/grail/graphics/boundedshape.java
package grail.graphics;

import grail.interfaces.BoundedShapeInterface;
import util.annotations.EditablePropertyNames;
import util.annotations.PropertyNames;
import util.annotations.StructurePattern;
import util.annotations.StructurePatternNames;
import util.annotations.Tags;

@StructurePattern(StructurePatternNames.BEAN_PATTERN)
@PropertyNames({"X", "Y", "Width", "Height"})
@EditablePropertyNames({"X", "Y", "Width", "Height"})
public class BoundedShape implements BoundedShapeInterface {

	private int x;
	private int y;
	private int width;
	private int height;
	
	public BoundedShape (int xPos, int yPos, int width, int height){
		x = xPos;
		y = yPos;
		this.width = width;
		this.height = height;
	}
	
	// empty constructor
	public BoundedShape(){}
	
	@Override
	public int getX() {
		return x;
	}
	
	@Override
	public void setX(int newX) {
		x = newX;
	}

	@Override
	public int getY() {
		return y;
	}
	
	@Override
	public void setY(int newY) {
		y = newY;
	}

	@Override
	public void setWidth(int newWidth) {
		width = newWidth;
	}

	@Override
	public int getWidth() {
		return width;
	}

	@Override
	public void setHeight(int newHeight) {
		height = newHeight;
	}

	@Override
	public int getHeight() {
		return height;
	}

	@Override
	@Tags({"move"})
	public void move(int moveX, int moveY) {
		x += moveX;
		y += moveY;
	}

}
//END OF FILE
//START OF FILE: src/grail/graphics/bridgescene.java
package grail.graphics;

import grail.interfaces.AvatarInterface;
import grail.interfaces.BoundedShapeInterface;
import grail.interfaces.BridgeSceneInterface;
import grail.interfaces.GorgeWithBridgeInterface;
import util.annotations.PropertyNames;
import util.annotations.StructurePattern;
import util.annotations.StructurePatternNames;
import util.annotations.Tags;

@StructurePattern(StructurePatternNames.BEAN_PATTERN)
@Tags({"BridgeScene"})
@PropertyNames({"Guard", "Arthur", "Lancelot","Robin", "Galahad",
	"Gorge", "GuardArea", "KnightArea", "Occupied", "KnightTurn"})
public class BridgeScene implements BridgeSceneInterface {

	private static final String EMPTY_STRING = "";
	
	private static final int ARTHUR_LOCATION_X = 100;
	private static final int ARTHUR_LOCATION_Y = 300;
	private static final int LANCELOT_LOCATION_X = 200;
	private static final int LANCELOT_LOCATION_Y = 300;
	private static final int ROBIN_LOCATION_X = 300;
	private static final int ROBIN_LOCATION_Y = 300;
	private static final int GALAHAD_LOCATION_X = 400;
	private static final int GALAHAD_LOCATION_Y = 300;
	private static final int GUARD_LOCATION_X = 750;
	private static final int GUARD_LOCATION_Y = 300;
	
	private static final int GORGE_LEFT_X = 850;
	private static final int GORGE_RIGHT_X = 1050;
	private static final int BRIDGE_WIDTH = 50;
	private static final int BRIDGE_Y = 275;
	
	private static final int KNIGHT_AREA_X = 500;
	private static final int KNIGHT_AREA_Y = 250;
	private static final int GUARD_AREA_X = 700;
	private static final int GUARD_AREA_Y = 250;
	
	private static final int AREA_DIAMETERS = 100;
	
	private static final int PASS_DESTINATION_X = GORGE_RIGHT_X + 100;
	private static final int FAIL_DESTINATION_X = (GORGE_LEFT_X + GORGE_RIGHT_X)/2;
	private static final int FAIL_DESTINATION_Y = BRIDGE_Y + 300;
	
	private static final String ARTHUR_FILE_LOCATION = "images/arthur.jpg";
	private static final String LANCELOT_FILE_LOCATION = "images/lancelot.jpg";
	private static final String ROBIN_FILE_LOCATION = "images/robin.jpg";
	private static final String GALAHAD_FILE_LOCATION = "images/galahad.jpg";
	private static final String GUARD_FILE_LOCATION = "images/guard.jpg";
	
	private AvatarInterface arthur;
	private AvatarInterface lancelot;
	private AvatarInterface robin;
	private AvatarInterface galahad;
	private AvatarInterface guard;
	
	private AvatarInterface occupyingKnight;
	
	private GorgeWithBridgeInterface gorge;
	private BoundedShapeInterface knightArea;
	private BoundedShapeInterface guardArea;
	
	private boolean occupied;
	private boolean knightTurn;
	
	public BridgeScene(){
		arthur = new Avatar(ARTHUR_LOCATION_X, ARTHUR_LOCATION_Y, ARTHUR_FILE_LOCATION);
		lancelot = new Avatar(LANCELOT_LOCATION_X, LANCELOT_LOCATION_Y, LANCELOT_FILE_LOCATION);
		robin = new Avatar(ROBIN_LOCATION_X, ROBIN_LOCATION_Y, ROBIN_FILE_LOCATION);
		galahad = new Avatar(GALAHAD_LOCATION_X, GALAHAD_LOCATION_Y, GALAHAD_FILE_LOCATION);
		guard = new Avatar(GUARD_LOCATION_X,GUARD_LOCATION_Y, GUARD_FILE_LOCATION);
		
		gorge = new GorgeWithBridge(GORGE_LEFT_X, GORGE_RIGHT_X, BRIDGE_Y, BRIDGE_WIDTH);
		knightArea = new Oval(KNIGHT_AREA_X, KNIGHT_AREA_Y, AREA_DIAMETERS, AREA_DIAMETERS);
		guardArea = new Oval(GUARD_AREA_X, GUARD_AREA_Y, AREA_DIAMETERS, AREA_DIAMETERS);
		
		occupied = false;
		knightTurn = false;
	}
	
	@Override
	@Tags({"approach"})
	public void approach(AvatarInterface knight){
		if (getOccupied()){
			return;
		}
		
		// Place knight in middle of proper area
		knight.setX(knightArea.getX() + knightArea.getWidth()/2);
		knight.setY(knightArea.getY() + knightArea.getHeight()/2);
		occupied = true;
		knightTurn = false;
		occupyingKnight = knight;
	}
	
	@Override
	@Tags({"say"})
	public void say(String string){
		if (!getOccupied()){
			return;
		}
		
		if (getKnightTurn()){
			occupyingKnight.getStringShape().setText(string);
			getGuard().getStringShape().setText(EMPTY_STRING);
			knightTurn = false;
		}else{
			getGuard().getStringShape().setText(string);
			occupyingKnight.getStringShape().setText(EMPTY_STRING);
			knightTurn = true;
		}
	}
	
	@Override
	@Tags({"passed"})
	public void passed(){
		if (!getOccupied()){
			return;
		}
		
		occupyingKnight.setX(PASS_DESTINATION_X);
		
		// Reset challenge area
		occupyingKnight.getStringShape().setText(EMPTY_STRING);
		getGuard().getStringShape().setText(EMPTY_STRING);
		occupied = false;
		occupyingKnight = null;
	}
	
	@Override
	@Tags({"failed"})
	public void failed(){
		if (!getOccupied()){
			return;
		}
		
		// if knight's turn, then guard falls
		if (getKnightTurn()){
			getGuard().getStringShape().setText(EMPTY_STRING);
			getGuard().setX(FAIL_DESTINATION_X);
			getGuard().setY(FAIL_DESTINATION_Y);
		}else{
			occupyingKnight.setX(FAIL_DESTINATION_X);
			occupyingKnight.setY(FAIL_DESTINATION_Y);
			occupyingKnight.getStringShape().setText(EMPTY_STRING);
			occupied = false;
			occupyingKnight = null;
		}
	}
	
	@Override
	@Tags({"scroll"})
	public void scroll(int scrollX, int scrollY) {
		arthur.move(-scrollX, -scrollY);
		lancelot.move(-scrollX, -scrollY);
		robin.move(-scrollX, -scrollY);
		galahad.move(-scrollX, -scrollY);
		guard.move(-scrollX, -scrollY);
		
		gorge.move(-scrollX, -scrollY);
		knightArea.move(-scrollX, -scrollY);
		guardArea.move(-scrollX, -scrollY);
	}
	
	@Override
	public boolean getOccupied(){
		return occupied;
	}
	
	@Override
	public boolean getKnightTurn(){
		return knightTurn;
	}
	
	@Override
	public GorgeWithBridgeInterface getGorge(){
		return gorge;
	}
	
	@Override
	public BoundedShapeInterface getKnightArea(){
		return knightArea;
	}
	
	@Override
	public BoundedShapeInterface getGuardArea(){
		return guardArea;
	}
	
	@Override
	public AvatarInterface getArthur() {
		return arthur;
	}

	@Override
	public AvatarInterface getLancelot() {
		return lancelot;
	}

	@Override
	public AvatarInterface getRobin() {
		return robin;
	}

	@Override
	public AvatarInterface getGalahad() {
		return galahad;
	}

	@Override
	public AvatarInterface getGuard() {
		return guard;
	}

}
//END OF FILE
//START OF FILE: src/grail/graphics/gorgewithbridge.java
package grail.graphics;

import grail.interfaces.GorgeWithBridgeInterface;
import grail.interfaces.BoundedShapeInterface;
import grail.interfaces.RotatingLineInterface;
import util.annotations.EditablePropertyNames;
import util.annotations.PropertyNames;
import util.annotations.StructurePattern;
import util.annotations.StructurePatternNames;
import util.annotations.Visible;

@StructurePattern(StructurePatternNames.BEAN_PATTERN)
@PropertyNames({"LeftSide", "RightSide", "Bridge", "LeftX", "RightX", "UpperY", "BridgeWidth", "GorgeLength"})
@EditablePropertyNames({"LeftX", "RightX", "UpperY", "BridgeWidth", "GorgeLength"})
public class GorgeWithBridge implements GorgeWithBridgeInterface {
	
	private static final int DEFAULT_UPPER_Y = -1000;
	private static final int DEFAULT_LENGTH = 4000;
	private static final double ANGLE_DOWNWARD = Math.PI/2;
	
	private RotatingLineInterface leftSide;
	private RotatingLineInterface rightSide;
	private BoundedShapeInterface bridge;
	
	// Constructors
	public GorgeWithBridge(int leftX, int rightX, int bridgeY, int bridgeWidth){
		leftSide = new RotatingLine(leftX, DEFAULT_UPPER_Y, DEFAULT_LENGTH, ANGLE_DOWNWARD);
		rightSide = new RotatingLine(rightX, DEFAULT_UPPER_Y, DEFAULT_LENGTH, ANGLE_DOWNWARD);
		
		// bridgeWidth refers to the width of the bridge, which is the height of the rectangle
		bridge = new Rectangle(leftX, bridgeY, rightX-leftX, bridgeWidth);
	}
	
	public GorgeWithBridge(int leftX, int rightX, int y, int gorgeLength, int bridgeY, int bridgeWidth){
		leftSide = new RotatingLine(leftX, y, gorgeLength, ANGLE_DOWNWARD);
		rightSide = new RotatingLine(rightX, y, gorgeLength, ANGLE_DOWNWARD);
		
		bridge = new Rectangle(leftX, bridgeY, rightX-leftX, bridgeWidth);
	}
	
	@Override
	public RotatingLineInterface getLeftSide(){
		return leftSide;
	}
	
	@Override
	public RotatingLineInterface getRightSide(){
		return rightSide;
	}
	
	@Override
	public BoundedShapeInterface getBridge(){
		return bridge;
	}
	
	@Override
	@Visible(false)
	public int getUpperY(){
		return leftSide.getY();
	}
	@Override
	@Visible(false)
	public void setUpperY(int y){
		leftSide.setY(y);
		rightSide.setY(y);
	}
	
	@Override
	@Visible(false)
	public int getLeftX(){
		return leftSide.getX();
	}
	@Override
	@Visible(false)
	public void setLeftX(int x){
		leftSide.setX(x);
		bridge.setX(x);
		bridge.setWidth(rightSide.getX() - x);
	}
	
	@Override
	@Visible(false)
	public int getRightX(){
		return rightSide.getX();
	}
	@Override
	@Visible(false)
	public void setRightX(int x){
		rightSide.setX(x);
		bridge.setWidth(x- leftSide.getX());
	}
	
	@Override
	@Visible(false)
	public int getBridgeWidth(){
		return bridge.getHeight();
	}
	@Override
	@Visible(false)
	public void setBridgeWidth(int width){
		bridge.setHeight(width);
	}
	
	@Override
	@Visible(false)
	public int getGorgeLength(){
		return (int)leftSide.getRadius();
	}
	@Override
	@Visible(false)
	public void setGorgeLength(int length){
		leftSide.setRadius(length);
		rightSide.setRadius(length);
	}

	@Override
	public void move(int moveX, int moveY) {
		leftSide.setX(leftSide.getX() + moveX);
		leftSide.setY(leftSide.getY() + moveY);
		rightSide.setX(rightSide.getX() + moveX);
		rightSide.setY(rightSide.getY() + moveY);
		bridge.move(moveX, moveY);
	}
	
}
//END OF FILE
//START OF FILE: src/grail/graphics/image.java
package grail.graphics;

import javax.swing.Icon;
import javax.swing.ImageIcon;

import grail.interfaces.ImageInterface;
import util.annotations.EditablePropertyNames;
import util.annotations.PropertyNames;
import util.annotations.StructurePattern;
import util.annotations.StructurePatternNames;

@StructurePattern(StructurePatternNames.IMAGE_PATTERN)
@PropertyNames({"X", "Y", "Width", "Height", "ImageFileName"})
@EditablePropertyNames({"X", "Y", "Width", "Height", "ImageFileName"})
public class Image extends Rectangle implements ImageInterface {

	private String imageFileName;
	
	public Image(int xPos, int yPos, int width, int height, String imageFileName){
		super(xPos, yPos, width, height);
		this.imageFileName = imageFileName;
	}
	
	public Image(int xPos, int yPos, String imageFileName){
		super(xPos, yPos, 0, 0);		//temporary height and width
		
		this.imageFileName = imageFileName;
		
		// Use image height and width
		Icon icon = new ImageIcon(imageFileName);
		setHeight(icon.getIconHeight());
		setWidth(icon.getIconWidth());
	}
	
	@Override
	public void setImageFileName(String newFileName) {
		imageFileName = newFileName;
	}

	@Override
	public String getImageFileName() {
		return imageFileName;
	}

}
//END OF FILE
//START OF FILE: src/grail/graphics/oval.java
package grail.graphics;

import util.annotations.EditablePropertyNames;
import util.annotations.PropertyNames;
import util.annotations.StructurePattern;
import util.annotations.StructurePatternNames;

@StructurePattern(StructurePatternNames.OVAL_PATTERN)
@PropertyNames({"X", "Y", "Width", "Height"})
@EditablePropertyNames({"X", "Y", "Width", "Height"})
public class Oval extends BoundedShape{
	
	public Oval (int xPos, int yPos, int width, int height){
		super(xPos, yPos, width, height);
	}
	
}
//END OF FILE
//START OF FILE: src/grail/graphics/rectangle.java
package grail.graphics;

import util.annotations.EditablePropertyNames;
import util.annotations.PropertyNames;
import util.annotations.StructurePattern;
import util.annotations.StructurePatternNames;

@StructurePattern(StructurePatternNames.RECTANGLE_PATTERN)
@PropertyNames({"X", "Y", "Width", "Height"})
@EditablePropertyNames({"X", "Y", "Width", "Height"})
public class Rectangle extends BoundedShape {

	
	public Rectangle (int xPos, int yPos, int width, int height){
		super(xPos, yPos, width, height);
	}
	

}
//END OF FILE
//START OF FILE: src/grail/graphics/rotatingline.java
package grail.graphics;

import grail.interfaces.RotatingLineInterface;
import util.annotations.EditablePropertyNames;
import util.annotations.PropertyNames;
import util.annotations.StructurePattern;
import util.annotations.StructurePatternNames;
import util.annotations.Tags;

@Tags({"RotatingLine"})
@StructurePattern(StructurePatternNames.LINE_PATTERN)
@PropertyNames({"Height", "Width", "X", "Y","Angle", "Radius"})
@EditablePropertyNames({"X", "Y","Angle", "Radius"})
public class RotatingLine extends BoundedShape implements RotatingLineInterface{

	private static final double DEGREE_IN_RADIANS = Math.PI / 180;
	private static final double DEFAULT_RADIUS = 100;
	
	private double radius = DEFAULT_RADIUS;
	private double angle = 0;
	
	public RotatingLine(){
		setX(0);
		setY(0);
	}
	
	public RotatingLine(int xPos, int yPos, double r, double theta){
		setX(xPos);
		setY(yPos);
		radius = r;
		angle = theta;
	}
	
	@Override
	public int getHeight() {
		return (int)(radius*Math.sin(angle));
	}

	@Override
	public int getWidth() {
		return (int)(radius*Math.cos(angle));
	}

	@Override
	public void setRadius(double r) {
		radius = r;
	}

	@Override
	public double getRadius() {
		return radius;
	}

	@Override
	public void setAngle(double theta) {
		angle = theta;
	}

	@Override
	public double getAngle() {
		return angle;
	}

	@Override
	@Tags({"rotate"})
	public void rotateByClockwiseDegrees(int degrees) {
		setAngle(getAngle() + (degrees * DEGREE_IN_RADIANS));
	}

}
//END OF FILE
//START OF FILE: src/grail/graphics/stringshape.java
package grail.graphics;

import grail.interfaces.StringShapeInterface;
import util.annotations.EditablePropertyNames;
import util.annotations.PropertyNames;
import util.annotations.StructurePattern;
import util.annotations.StructurePatternNames;

@StructurePattern(StructurePatternNames.STRING_PATTERN)
@PropertyNames({"X", "Y", "Text"})
@EditablePropertyNames({"X", "Y", "Text"})
public class StringShape implements StringShapeInterface {

	private int x;
	private int y;
	private String text;
	
	public StringShape(int xPos, int yPos, String text){
		x = xPos;
		y = yPos;
		this.text = text;
	}
	
	@Override
	public void setX(int newX) {
		x = newX;
	}

	@Override
	public int getX() {
		return x;
	}

	@Override
	public void setY(int newY) {
		y = newY;
	}

	@Override
	public int getY() {
		return y;
	}

	@Override
	public void setText(String newString) {
		text = newString;
	}

	@Override
	public String getText() {
		return text;
	}

}
//END OF FILE
//START OF FILE: src/grail/graphics/vshape.java
package grail.graphics;

import grail.interfaces.RotatingLineInterface;
import grail.interfaces.VShapeInterface;
import util.annotations.EditablePropertyNames;
import util.annotations.PropertyNames;
import util.annotations.StructurePattern;
import util.annotations.StructurePatternNames;
import util.annotations.Tags;
import util.annotations.Visible;

@StructurePattern(StructurePatternNames.BEAN_PATTERN)
@Tags({"Angle"})
@PropertyNames({"X", "Y","LeftLine", "RightLine", "LinesLength"})
@EditablePropertyNames({"X", "Y", "LinesLength"})
public class VShape implements VShapeInterface {

	private int x;
	private int y;
	private RotatingLineInterface leftLine;
	private RotatingLineInterface rightLine;
	
	private static final double DEFAULT_LINE_LENGTH = 80;
	private static final double RIGHT_LINE_START_ANGLE = Math.PI/3;
	private static final double LEFT_LINE_START_ANGLE = 2*Math.PI/3;
	
	/**
	 * The only required constructor.
	 */
	public VShape(){
		rightLine = new RotatingLine(0, 0, DEFAULT_LINE_LENGTH, RIGHT_LINE_START_ANGLE);
		leftLine = new RotatingLine(0, 0, DEFAULT_LINE_LENGTH, LEFT_LINE_START_ANGLE);
		
		//Make the entire shape fit in the leftmost corner 
		move(0 + Math.abs(leftLine.getWidth()), 0);
	}
	
	public VShape(int xPos, int yPos, double lineLengths){
		rightLine = new RotatingLine(xPos,yPos, lineLengths, RIGHT_LINE_START_ANGLE);
		leftLine = new RotatingLine(xPos,yPos, lineLengths, LEFT_LINE_START_ANGLE);
		x = xPos;
		y = yPos;
	}
	
	@Visible(false)
	@Override
	public void setX(int newX) {
		leftLine.setX(newX);
		rightLine.setX(newX);
		x = newX;
	}

	@Visible(false)
	@Override
	public int getX() {
		return x;
	}

	@Visible(false)
	@Override
	public void setY(int newY) {
		leftLine.setY(newY);
		rightLine.setY(newY);
		y = newY;
	}

	@Visible(false)
	@Override
	public int getY() {
		return y;
	}

	@Override
	public RotatingLineInterface getLeftLine() {
		return leftLine;
	}

	@Override
	public RotatingLineInterface getRightLine() {
		return rightLine;
	}

	@Override
	public void move(int changeInX, int changeInY) {
		setX(x + changeInX);
		setY(y + changeInY);
	}

	/**
	 * If line lengths differ, gives length of left line.
	 */
	@Override
	@Visible(false)
	public double getLinesLength() {
		return leftLine.getRadius();
	}

	@Override
	@Visible(false)
	public void setLinesLength(double newLength) {
		leftLine.setRadius(newLength);
		rightLine.setRadius(newLength);
	}

}
//END OF FILE
//START OF FILE: src/grail/interfaces/avatarinterface.java
package grail.interfaces;

import util.annotations.Tags;

@Tags({"Avatar", "move"})
public interface AvatarInterface {
	
	public void setX(int newX);
	public int getX();

	public void setY(int newY);
	public int getY();
	
	public StringShapeInterface getStringShape();
	
	public ImageInterface getHead();
	
	public VShapeInterface getArms();
	
	public VShapeInterface getLegs();
	
	public RotatingLineInterface getTorso();
	
	public void move(int changeInX, int changeInY);
	public void scale(double scalar);
}
//END OF FILE
//START OF FILE: src/grail/interfaces/basehistory.java
package grail.interfaces;

public interface BaseHistory {
	public void addElement(Token element);
	public Token elementAt (int index); 
	public int size();
}
//END OF FILE
//START OF FILE: src/grail/interfaces/boundedshapeinterface.java
package grail.interfaces;

import util.annotations.Tags;

public interface BoundedShapeInterface {
	public void setX(int newX);
	public int getX();

	public void setY(int newY);
	public int getY();
	
	public void setWidth(int newWidth);
	public int getWidth();
	
	public void setHeight(int newHeight);
	public int getHeight();
	
	@Tags({"move"})
	public void move(int moveX, int moveY);
}
//END OF FILE
//START OF FILE: src/grail/interfaces/bridgesceneinterface.java
package grail.interfaces;

import util.annotations.Tags;

@Tags({"BridgeScene"})
public interface BridgeSceneInterface {
	public AvatarInterface getArthur();
	public AvatarInterface getLancelot();
	public AvatarInterface getRobin();
	public AvatarInterface getGalahad();
	public AvatarInterface getGuard();
	
	public GorgeWithBridgeInterface getGorge();
	public BoundedShapeInterface getKnightArea();
	public BoundedShapeInterface getGuardArea();
	
	@Tags({"approach"})
	public void approach(AvatarInterface knight);
	
	@Tags({"say"})
	public void say(String string);
	
	@Tags({"passed"})
	public void passed();
	
	@Tags({"failed"})
	public void failed();
	public boolean getOccupied();
	public boolean getKnightTurn();
	
	@Tags({"scroll"})
	public void scroll(int scrollAmount, int i);
}
//END OF FILE
//START OF FILE: src/grail/interfaces/clearablehistoryinterface.java
package grail.interfaces;

import util.annotations.Tags;

@Tags({"ClearableHistory"})
public interface ClearableHistoryInterface extends BaseHistory {
	public void clear();
}
//END OF FILE
//START OF FILE: src/grail/interfaces/gorgewithbridgeinterface.java
package grail.interfaces;


public interface GorgeWithBridgeInterface {

	public RotatingLineInterface getLeftSide();
	public RotatingLineInterface getRightSide();
	public BoundedShapeInterface getBridge();

	public int getUpperY();
	public void setUpperY(int y);

	public int getLeftX();
	public void setLeftX(int x);

	public int getRightX();
	public void setRightX(int x);

	public int getBridgeWidth();
	public void setBridgeWidth(int width);

	public int getGorgeLength();
	public void setGorgeLength(int length);
	
	public void move(int moveX, int moveY);
}
//END OF FILE
//START OF FILE: src/grail/interfaces/imageinterface.java
package grail.interfaces;

import util.annotations.StructurePattern;
import util.annotations.StructurePatternNames;

@StructurePattern(StructurePatternNames.IMAGE_PATTERN)
public interface ImageInterface extends BoundedShapeInterface{
	public void setImageFileName(String imageFileName);
	public String getImageFileName();
}
//END OF FILE
//START OF FILE: src/grail/interfaces/number.java
package grail.interfaces;

import util.annotations.Tags;

@Tags({"Number"})
public interface Number extends Token {
	public int getValue();
}
//END OF FILE
//START OF FILE: src/grail/interfaces/rotatinglineinterface.java
package grail.interfaces;

import util.annotations.StructurePattern;
import util.annotations.StructurePatternNames;
import util.annotations.Tags;

@StructurePattern(StructurePatternNames.LINE_PATTERN)
@Tags({"RotatingLine"})
public interface RotatingLineInterface extends BoundedShapeInterface{

	public void setRadius(double r);
	public double getRadius();
	
	public void setAngle(double theta);
	public double getAngle();
	
	@Tags({"rotate"})
	public void rotateByClockwiseDegrees(int degrees);
}
//END OF FILE
//START OF FILE: src/grail/interfaces/scannerbeaninterface.java
package grail.interfaces;

import util.annotations.Tags;

@Tags({"ScannerBean"})
public interface ScannerBeanInterface {
	public String getScannedString();
	public void setScannedString(String s);
	public Token[] getTokens();
	public String[] getErrors();
	public ClearableHistoryInterface getTokenList();
}
//END OF FILE
//START OF FILE: src/grail/interfaces/stringshapeinterface.java
package grail.interfaces;

import util.annotations.StructurePattern;
import util.annotations.StructurePatternNames;

@StructurePattern(StructurePatternNames.STRING_PATTERN)
public interface StringShapeInterface {
	
	public void setX(int newX);
	public int getX();

	public void setY(int newY);
	public int getY();

	public void setText(String newString);
	public String getText();
	
}
//END OF FILE
//START OF FILE: src/grail/interfaces/token.java
package grail.interfaces;

import util.annotations.Tags;

@Tags({"Token", "Number", "Word", "Quote", "Plus", "Minus", "Start", "End"})
public interface Token {
	
	public void setInput(String newString);
	public String getInput();

}
//END OF FILE
//START OF FILE: src/grail/interfaces/vshapeinterface.java
package grail.interfaces;

import util.annotations.Tags;

@Tags({"Angle", "move"})
public interface VShapeInterface {
	
	public void setX(int newX);
	public int getX();
	
	public void setY(int newY);
	public int getY();
	
	public RotatingLineInterface getLeftLine();
	public RotatingLineInterface getRightLine();
	
	public double getLinesLength();
	public void setLinesLength(double newLength);
	
	@Tags({"move"})
	public void move(int changeInX, int changeInY);
}
//END OF FILE
//START OF FILE: src/grail/interfaces/word.java
package grail.interfaces;
import util.annotations.Tags;

@Tags({"Word"})
public interface Word extends Token {
	public String getValue();
}
//END OF FILE
//START OF FILE: src/grail/tokenbeans/endtoken.java
package grail.tokenBeans;

import util.annotations.EditablePropertyNames;
import util.annotations.StructurePattern;
import util.annotations.StructurePatternNames;
import util.annotations.Tags;

@Tags({"End"})
@StructurePattern(StructurePatternNames.BEAN_PATTERN)
@EditablePropertyNames({"Input"})
public class EndToken extends GenericToken {

	public EndToken(String input){
		super(input);
	}
	
}
//END OF FILE
//START OF FILE: src/grail/tokenbeans/generictoken.java
package grail.tokenBeans;

import grail.interfaces.Token;
import util.annotations.EditablePropertyNames;
import util.annotations.PropertyNames;
import util.annotations.StructurePattern;
import util.annotations.StructurePatternNames;
import util.annotations.Tags;


@Tags({"Token"})
@StructurePattern(StructurePatternNames.BEAN_PATTERN)
@PropertyNames({"Input"})
@EditablePropertyNames({"Input"})
public class GenericToken implements Token{
	private String input;
		
	public GenericToken(String input){
		setInput(input);
	}
	
	@Override
	public void setInput(String newString) {
		input = newString;
	}

	@Override
	public String getInput() {
		return input;
	}

}
//END OF FILE
//START OF FILE: src/grail/tokenbeans/minustoken.java
package grail.tokenBeans;

import grail.interfaces.Token;

import util.annotations.EditablePropertyNames;
import util.annotations.StructurePattern;
import util.annotations.StructurePatternNames;
import util.annotations.Tags;

@Tags({"Minus"})
@StructurePattern(StructurePatternNames.BEAN_PATTERN)
@EditablePropertyNames({"Input"})
public class MinusToken extends GenericToken {

	public MinusToken(String input){
		super(input);
	}
	
}
//END OF FILE
//START OF FILE: src/grail/tokenbeans/numbertoken.java
package grail.tokenBeans;

import grail.interfaces.Number;
import util.annotations.EditablePropertyNames;
import util.annotations.PropertyNames;
import util.annotations.StructurePattern;
import util.annotations.StructurePatternNames;
import util.annotations.Tags;

@Tags({"Number"})
@StructurePattern(StructurePatternNames.BEAN_PATTERN)
@PropertyNames({"Input", "Value"})
@EditablePropertyNames({"Input"})
public class NumberToken extends GenericToken implements Number{
	
	private int value;
	
	public NumberToken(String input){
		super(input);
		value = Integer.parseInt(input);
	}
	
	@Override
	public void setInput(String newString) {
		super.setInput(newString);
		value = Integer.parseInt(newString);
	}

	@Override
	public int getValue() {
		return value;
	}
}
//END OF FILE
//START OF FILE: src/grail/tokenbeans/plustoken.java
package grail.tokenBeans;

import grail.interfaces.Token;
import util.annotations.EditablePropertyNames;
import util.annotations.StructurePattern;
import util.annotations.StructurePatternNames;
import util.annotations.Tags;

@Tags({"Plus"})
@StructurePattern(StructurePatternNames.BEAN_PATTERN)
@EditablePropertyNames({"Input"})
public class PlusToken extends GenericToken {

	public PlusToken(String input){
		super(input);
	}
	
}
//END OF FILE
//START OF FILE: src/grail/tokenbeans/quotetoken.java
package grail.tokenBeans;

import util.annotations.EditablePropertyNames;
import util.annotations.StructurePattern;
import util.annotations.StructurePatternNames;
import util.annotations.Tags;

@Tags({"Quote"})
@StructurePattern(StructurePatternNames.BEAN_PATTERN)
@EditablePropertyNames({"Input"})
public class QuoteToken extends GenericToken{

	public QuoteToken(String input){
		super(input);
	}
	
}
//END OF FILE
//START OF FILE: src/grail/tokenbeans/starttoken.java
package grail.tokenBeans;

import util.annotations.EditablePropertyNames;
import util.annotations.StructurePattern;
import util.annotations.StructurePatternNames;
import util.annotations.Tags;

@Tags({"Start"})
@StructurePattern(StructurePatternNames.BEAN_PATTERN)
@EditablePropertyNames({"Input"})
public class StartToken extends GenericToken{
	
	public StartToken(String input){
		super(input);
	}
	
}
//END OF FILE
//START OF FILE: src/grail/tokenbeans/wordtoken.java
package grail.tokenBeans;

import grail.interfaces.Word;
import util.annotations.EditablePropertyNames;
import util.annotations.PropertyNames;
import util.annotations.StructurePattern;
import util.annotations.StructurePatternNames;
import util.annotations.Tags;

@Tags({"Word"})
@StructurePattern(StructurePatternNames.BEAN_PATTERN)
@PropertyNames({"Input", "Value"})
@EditablePropertyNames({"Input"})
public class WordToken extends GenericToken implements Word{

	private String value;
	
	public WordToken(String input){
		super(input);
		value = input.toLowerCase();
	}
	
	@Override
	public void setInput(String newString) {
		super.setInput(newString);
		value = newString.toLowerCase();
	}

	@Override
	public String getValue() {
		return value;
	}

}
//END OF FILE
//START OF FILE: src/main/assignment6.java
package main;

import bus.uigen.OEFrame;
import bus.uigen.ObjectEditor;
import grail.ScannerBean;
import grail.graphics.BridgeScene;
import grail.interfaces.BridgeSceneInterface;
import grail.interfaces.ScannerBeanInterface;
import util.misc.ThreadSupport;

public class Assignment6 {
	
	private static final int QUICK_DELAY = 20;
	private static final int SLOW_DELAY = 1000;
	
	private static final int NUM_FRAMES_PER_SCROLL = 15;
	private static final int SCROLL_AMOUNT = 10;
	
	private static final int OEFRAME_WIDTH = 1500;
	private static final int OEFRAME_HEIGHT = 1000;
	
	private static final String[] TEST_STRINGS = {
			"{ } - + 0029",
			"\" quoted string! \" someWORD er$$or e#ror",
			"aPproacH FAil mOve PaSS",
			"repEaT Say cAll defINE PROCeed",
			"redo ROTATELEFTARM RotateRightArm slEep THread",
			"Undo waiT M#re eR1ors"
	};
	
	public static void main(String[] args) {
		
		BridgeSceneInterface scene = new BridgeScene();
		OEFrame oeFrame = ObjectEditor.edit(scene);
		oeFrame.setSize(OEFRAME_WIDTH, OEFRAME_HEIGHT);
		
		// Show off scrolling
		for (int i = 0; i < NUM_FRAMES_PER_SCROLL; ++i){
			scene.scroll(SCROLL_AMOUNT, 0);
			oeFrame.refresh();
			ThreadSupport.sleep(QUICK_DELAY);
		}
		for (int i = 0; i < NUM_FRAMES_PER_SCROLL; ++i){
			scene.scroll(0, SCROLL_AMOUNT);
			oeFrame.refresh();
			ThreadSupport.sleep(QUICK_DELAY);
		}
		for (int i = 0; i < NUM_FRAMES_PER_SCROLL; ++i){
			scene.scroll(-SCROLL_AMOUNT, 0);
			oeFrame.refresh();
			ThreadSupport.sleep(QUICK_DELAY);
		}
		for (int i = 0; i < NUM_FRAMES_PER_SCROLL; ++i){
			scene.scroll(0, -SCROLL_AMOUNT);
			oeFrame.refresh();
			ThreadSupport.sleep(QUICK_DELAY);
		}
		
		// Animate interactions
		scene.approach(scene.getLancelot());
		oeFrame.refresh();
		ThreadSupport.sleep(SLOW_DELAY);
		
		scene.say("What is your name?");
		oeFrame.refresh();
		ThreadSupport.sleep(SLOW_DELAY);
		
		scene.say("Lancelot.");
		oeFrame.refresh();
		ThreadSupport.sleep(SLOW_DELAY);
		
		scene.say("Off you go.");
		oeFrame.refresh();
		ThreadSupport.sleep(SLOW_DELAY);
		
		scene.passed();
		oeFrame.refresh();
		ThreadSupport.sleep(SLOW_DELAY);
		
		scene.approach(scene.getGalahad());
		oeFrame.refresh();
		ThreadSupport.sleep(SLOW_DELAY);
		
		scene.say("What is your frame?");
		oeFrame.refresh();
		ThreadSupport.sleep(SLOW_DELAY);
		
		scene.say("Beg your pardon?");
		oeFrame.refresh();
		ThreadSupport.sleep(SLOW_DELAY);
		
		scene.failed();
		oeFrame.refresh();
		ThreadSupport.sleep(SLOW_DELAY);

		scene.approach(scene.getArthur());
		oeFrame.refresh();
		ThreadSupport.sleep(SLOW_DELAY);

		scene.say("What is your game?");
		oeFrame.refresh();
		ThreadSupport.sleep(SLOW_DELAY);

		scene.say("I'll give you one chance to guess.");
		oeFrame.refresh();
		ThreadSupport.sleep(SLOW_DELAY);
		
		scene.say("What?");
		oeFrame.refresh();
		ThreadSupport.sleep(SLOW_DELAY);
		
		scene.failed();
		oeFrame.refresh();
		ThreadSupport.sleep(SLOW_DELAY);
		
		// Animate ScannerBean
		ScannerBeanInterface myScanner = new ScannerBean();
		OEFrame oeFrame2 = ObjectEditor.edit(myScanner);
		oeFrame2.setSize(OEFRAME_WIDTH, OEFRAME_HEIGHT);
		for (int i= 0; i < TEST_STRINGS.length; ++i){
			myScanner.setScannedString(TEST_STRINGS[i]);
			oeFrame2.refresh();
			ThreadSupport.sleep(SLOW_DELAY);
		}
	}//end main
}//end class
//END OF FILE
//START OF FILE: src/mp/scanner/scanningiterator.java
package mp.scanner;

import java.util.Iterator;

public class ScanningIterator implements Iterator<String>{

	private String stringData;
	private int position = 0;
	
	/**
	 * Constructor
	 * @param s string to iterate over
	 */
	public ScanningIterator(String s){
		stringData = s;
	}

	/**
	 * Checks whether there is another token to be had
	 */
	@Override
	public boolean hasNext() {
		
		// Consume spaces
		position = indexOfNot(stringData, ' ', position);
		if (position == -1){
			position = stringData.length();
		}
		return (position < stringData.length());
	}

	/**
	 * Gets the next token
	 */
	@Override
	public String next() {
		
		// Consume spaces
		position = indexOfNot(stringData, ' ', position);
		if (position == -1){
			
			// Rest of string was spaces
			position = stringData.length();
			return "";
		}
		
		// Get token
		int tokenStart = position;
		int tokenEnd = position;
		
		// Treat quoted strings differently
		if (stringData.charAt(tokenStart) == '\"'){
			
			// Look for the closing quote after this quote
			tokenEnd = indexOf(stringData, '\"', tokenStart + 1);
			
			if (tokenEnd == -1){
				System.out.println("ERROR: No closing quote found. Assumed line end to be closing quote.");
				tokenEnd = stringData.length();
				position = tokenEnd;
				return stringData.substring(tokenStart, tokenEnd)+ "\"";
			
			// If closing quote exists, make sure it is grabbed
			} else {
				++tokenEnd;
			}
			
		// If not a quoted string, end of token is a space or line end	
		} else {
			tokenEnd = indexOf(stringData, ' ', tokenStart);
		}
			
		if (tokenEnd == -1){
			tokenEnd = stringData.length();
		}
		
		position = tokenEnd;
		
		return stringData.substring(tokenStart, tokenEnd);
	}
	
	/**
	 * Returns index of first character equal to ch
	 * @param s
	 * @param ch
	 * @param fromIndex index at which to start search
	 * @return index of first ocurrence of ch after fromIndex, or -1 if not found
	 */
	private static int indexOf(String s, char ch, int fromIndex){
		for (int i=fromIndex; i < s.length(); ++i){
			if (s.charAt(i)==ch){
				return i;
			}
		}
		return -1;
	}

	/**
	 * Returns index of first character not equal to ch
	 * 
	 * @param s
	 * @param ch
	 * @param fromIndex index at which to start search
	 * @return index of first character that is not ch after fromIndex, or -1 if no non-ch characters found
	 */
	private static int indexOfNot(String s, char ch, int fromIndex){
		for (int i=fromIndex; i < s.length(); ++i){
			if (s.charAt(i)!=ch){
				return i;
			}
		}
		return -1;
	}

}
//END OF FILE
