//START OF FILE: src/main/approach.java
package main;

import util.annotations.EditablePropertyNames;
import util.annotations.PropertyNames;
import util.annotations.StructurePattern;
import util.annotations.StructurePatternNames;
import util.annotations.Tags;

@Tags({ "Approach" })
@StructurePattern(StructurePatternNames.BEAN_PATTERN)
@PropertyNames({ "Input", "Value" })
@EditablePropertyNames({ "Input" })

public class Approach implements Token, TokenWord {

	private String scannedString;

	public Approach(String token) {
		scannedString = token;
	}

	@Override
	public void setInput(String scannedString) {
		this.scannedString = scannedString;
	}

	@Override
	public String getInput() {
		return scannedString;
	}

	@Override
	public String getValue() {
		String result = "";
		result = scannedString.toLowerCase();
		return result;
	}

}
//END OF FILE
//START OF FILE: src/main/assignment4.java
package main;

import bus.uigen.ObjectEditor;

public class Assignment4 {

	public static void main(String[] args) {
		processInput();
	}

	public static void processInput() {
		ScannerBean scanner = new ScannerBean();
		ObjectEditor.edit(scanner);
	}

} // end
//END OF FILE
//START OF FILE: src/main/call.java
package main;

import util.annotations.EditablePropertyNames;
import util.annotations.PropertyNames;
import util.annotations.StructurePattern;
import util.annotations.StructurePatternNames;
import util.annotations.Tags;

@Tags({ "Call" })
@StructurePattern(StructurePatternNames.BEAN_PATTERN)
@PropertyNames({ "Input", "Value" })
@EditablePropertyNames({ "Input" })

public class Call implements Token, TokenWord {

	private String scannedString;

	public Call(String token) {
		scannedString = token;
	}

	@Override
	public void setInput(String scannedString) {
		this.scannedString = scannedString;
	}

	@Override
	public String getInput() {
		return scannedString;
	}

	@Override
	public String getValue() {
		String result = "";
		result = scannedString.toLowerCase();
		return result;
	}

}
//END OF FILE
//START OF FILE: src/main/define.java
package main;

import util.annotations.EditablePropertyNames;
import util.annotations.PropertyNames;
import util.annotations.StructurePattern;
import util.annotations.StructurePatternNames;
import util.annotations.Tags;

@Tags({ "Define" })
@StructurePattern(StructurePatternNames.BEAN_PATTERN)
@PropertyNames({ "Input", "Value" })
@EditablePropertyNames({ "Input" })

public class Define implements Token, TokenWord {

	private String scannedString;

	public Define(String token) {
		scannedString = token;
	}

	@Override
	public void setInput(String scannedString) {
		this.scannedString = scannedString;
	}

	@Override
	public String getInput() {
		return scannedString;
	}

	@Override
	public String getValue() {
		String result = "";
		result = scannedString.toLowerCase();
		return result;
	}

}
//END OF FILE
//START OF FILE: src/main/end.java
package main;

import util.annotations.EditablePropertyNames;
import util.annotations.PropertyNames;
import util.annotations.StructurePattern;
import util.annotations.StructurePatternNames;
import util.annotations.Tags;

@Tags({ "End" })
@StructurePattern(StructurePatternNames.BEAN_PATTERN)
@PropertyNames({ "Input" })
@EditablePropertyNames({ "Input" })

public class End implements Token {

	private String scannedString;

	public End(String token) {
		scannedString = token;
	}

	@Override
	public void setInput(String scannedString) {
		this.scannedString = scannedString;

	}

	@Override
	public String getInput() {
		return scannedString;
	}

}
//END OF FILE
//START OF FILE: src/main/fail.java
package main;

import util.annotations.EditablePropertyNames;
import util.annotations.PropertyNames;
import util.annotations.StructurePattern;
import util.annotations.StructurePatternNames;
import util.annotations.Tags;

@Tags({ "Fail" })
@StructurePattern(StructurePatternNames.BEAN_PATTERN)
@PropertyNames({ "Input", "Value" })
@EditablePropertyNames({ "Input" })

public class Fail implements Token, TokenWord {

	private String scannedString;

	public Fail(String token) {
		scannedString = token;
	}

	@Override
	public void setInput(String scannedString) {
		this.scannedString = scannedString;
	}

	@Override
	public String getInput() {
		return scannedString;
	}

	@Override
	public String getValue() {
		String result = "";
		result = scannedString.toLowerCase();
		return result;
	}

}
//END OF FILE
//START OF FILE: src/main/minus.java
package main;

import util.annotations.EditablePropertyNames;
import util.annotations.PropertyNames;
import util.annotations.StructurePattern;
import util.annotations.StructurePatternNames;
import util.annotations.Tags;

@Tags({ "Minus" })
@StructurePattern(StructurePatternNames.BEAN_PATTERN)
@PropertyNames({ "Input" })
@EditablePropertyNames({ "Input" })

public class Minus implements Token {

	private String scannedString;

	public Minus(String token) {
		scannedString = token;
	}

	@Override
	public void setInput(String scannedString) {
		this.scannedString = scannedString;
	}

	@Override
	public String getInput() {
		return scannedString;
	}

}
//END OF FILE
//START OF FILE: src/main/move.java
package main;

import util.annotations.EditablePropertyNames;
import util.annotations.PropertyNames;
import util.annotations.StructurePattern;
import util.annotations.StructurePatternNames;
import util.annotations.Tags;

@Tags({ "Move" })
@StructurePattern(StructurePatternNames.BEAN_PATTERN)
@PropertyNames({ "Input", "Value" })
@EditablePropertyNames({ "Input" })

public class Move implements Token, TokenWord {

	private String scannedString;

	public Move(String token) {
		scannedString = token;
	}

	@Override
	public void setInput(String scannedString) {
		this.scannedString = scannedString;
	}

	@Override
	public String getInput() {
		return scannedString;
	}

	@Override
	public String getValue() {
		String result = "";
		result = scannedString.toLowerCase();
		return result;
	}

}
//END OF FILE
//START OF FILE: src/main/number.java
package main;

import util.annotations.EditablePropertyNames;
import util.annotations.PropertyNames;
import util.annotations.StructurePattern;
import util.annotations.StructurePatternNames;
import util.annotations.Tags;

@Tags({ "Number" })
@StructurePattern(StructurePatternNames.BEAN_PATTERN)
@PropertyNames({ "Input", "Value" })
@EditablePropertyNames({ "Input" })

public class Number implements Token, TokenNumber {

	private String scannedString;

	public Number(String token) {
		scannedString = token;
	}

	@Override
	public void setInput(String scannedString) {
		this.scannedString = scannedString;
	}

	@Override
	public String getInput() {
		return scannedString;
	}

	@Override
	public int getValue() {
		int result = 0;
		result = Integer.parseInt(scannedString);
		return result;
	}
}
//END OF FILE
//START OF FILE: src/main/pass.java
package main;

import util.annotations.EditablePropertyNames;
import util.annotations.PropertyNames;
import util.annotations.StructurePattern;
import util.annotations.StructurePatternNames;
import util.annotations.Tags;

@Tags({ "Pass" })
@StructurePattern(StructurePatternNames.BEAN_PATTERN)
@PropertyNames({ "Input", "Value" })
@EditablePropertyNames({ "Input" })

public class Pass implements Token, TokenWord {

	private String scannedString;

	public Pass(String token) {
		scannedString = token;
	}

	@Override
	public void setInput(String scannedString) {
		this.scannedString = scannedString;
	}

	@Override
	public String getInput() {
		return scannedString;
	}

	@Override
	public String getValue() {
		String result = "";
		result = scannedString.toLowerCase();
		return result;
	}

}
//END OF FILE
//START OF FILE: src/main/plus.java
package main;

import util.annotations.EditablePropertyNames;
import util.annotations.PropertyNames;
import util.annotations.StructurePattern;
import util.annotations.StructurePatternNames;
import util.annotations.Tags;

@Tags({ "Plus" })
@StructurePattern(StructurePatternNames.BEAN_PATTERN)
@PropertyNames({ "Input", "Value" })
@EditablePropertyNames({ "Input" })

public class Plus implements Token {

	private String scannedString;

	public Plus(String token) {
		scannedString = token;
	}

	@Override
	public void setInput(String scannedString) {
		this.scannedString = scannedString;

	}

	@Override
	public String getInput() {
		return scannedString;
	}

}
//END OF FILE
//START OF FILE: src/main/proceedall.java
package main;

import util.annotations.EditablePropertyNames;
import util.annotations.PropertyNames;
import util.annotations.StructurePattern;
import util.annotations.StructurePatternNames;
import util.annotations.Tags;

@Tags({ "ProceedAll" })
@StructurePattern(StructurePatternNames.BEAN_PATTERN)
@PropertyNames({ "Input", "Value" })
@EditablePropertyNames({ "Input" })

public class ProceedAll implements Token, TokenWord {

	private String scannedString;

	public ProceedAll(String token) {
		scannedString = token;
	}

	@Override
	public void setInput(String scannedString) {
		this.scannedString = scannedString;
	}

	@Override
	public String getInput() {
		return scannedString;
	}

	@Override
	public String getValue() {
		String result = "";
		result = scannedString.toLowerCase();
		return result;
	}

}
//END OF FILE
//START OF FILE: src/main/quote.java
package main;

import util.annotations.EditablePropertyNames;
import util.annotations.PropertyNames;
import util.annotations.StructurePattern;
import util.annotations.StructurePatternNames;
import util.annotations.Tags;

@Tags({ "Quote" })
@StructurePattern(StructurePatternNames.BEAN_PATTERN)
@PropertyNames({ "Input" })
@EditablePropertyNames({ "Input" })

public class Quote implements Token {

	private String scannedString;

	public Quote(String token) {
		scannedString = token;
	}

	@Override
	public void setInput(String scannedString) {
		this.scannedString = scannedString;

	}

	@Override
	public String getInput() {
		return scannedString;
	}

}
//END OF FILE
//START OF FILE: src/main/redo.java
package main;

import util.annotations.EditablePropertyNames;
import util.annotations.PropertyNames;
import util.annotations.StructurePattern;
import util.annotations.StructurePatternNames;
import util.annotations.Tags;

@Tags({ "Redo" })
@StructurePattern(StructurePatternNames.BEAN_PATTERN)
@PropertyNames({ "Input", "Value" })
@EditablePropertyNames({ "Input" })

public class Redo implements Token, TokenWord {

	private String scannedString;

	public Redo(String token) {
		scannedString = token;
	}

	@Override
	public void setInput(String scannedString) {
		this.scannedString = scannedString;
	}

	@Override
	public String getInput() {
		return scannedString;
	}

	@Override
	public String getValue() {
		String result = "";
		result = scannedString.toLowerCase();
		return result;
	}

}
//END OF FILE
//START OF FILE: src/main/repeat.java
package main;

import util.annotations.EditablePropertyNames;
import util.annotations.PropertyNames;
import util.annotations.StructurePattern;
import util.annotations.StructurePatternNames;
import util.annotations.Tags;

@Tags({ "Repeat" })
@StructurePattern(StructurePatternNames.BEAN_PATTERN)
@PropertyNames({ "Input", "Value" })
@EditablePropertyNames({ "Input" })

public class Repeat implements Token, TokenWord {

	private String scannedString;

	public Repeat(String token) {
		scannedString = token;
	}

	@Override
	public void setInput(String scannedString) {
		this.scannedString = scannedString;
	}

	@Override
	public String getInput() {
		return scannedString;
	}

	@Override
	public String getValue() {
		String result = "";
		result = scannedString.toLowerCase();
		return result;
	}

}
//END OF FILE
//START OF FILE: src/main/rotateleftarm.java
package main;

import util.annotations.EditablePropertyNames;
import util.annotations.PropertyNames;
import util.annotations.StructurePattern;
import util.annotations.StructurePatternNames;
import util.annotations.Tags;

@Tags({ "RotateLeftArm" })
@StructurePattern(StructurePatternNames.BEAN_PATTERN)
@PropertyNames({ "Input", "Value" })
@EditablePropertyNames({ "Input" })

public class RotateLeftArm implements Token, TokenWord {

	private String scannedString;

	public RotateLeftArm(String token) {
		scannedString = token;
	}

	@Override
	public void setInput(String scannedString) {
		this.scannedString = scannedString;
	}

	@Override
	public String getInput() {
		return scannedString;
	}

	@Override
	public String getValue() {
		String result = "";
		result = scannedString.toLowerCase();
		return result;
	}

}
//END OF FILE
//START OF FILE: src/main/rotaterightarm.java
package main;

import util.annotations.EditablePropertyNames;
import util.annotations.PropertyNames;
import util.annotations.StructurePattern;
import util.annotations.StructurePatternNames;
import util.annotations.Tags;

@Tags({ "RotateRightArm" })
@StructurePattern(StructurePatternNames.BEAN_PATTERN)
@PropertyNames({ "Input", "Value" })
@EditablePropertyNames({ "Input" })

public class RotateRightArm implements Token, TokenWord {

	private String scannedString;

	public RotateRightArm(String token) {
		scannedString = token;
	}

	@Override
	public void setInput(String scannedString) {
		this.scannedString = scannedString;
	}

	@Override
	public String getInput() {
		return scannedString;
	}

	@Override
	public String getValue() {
		String result = "";
		result = scannedString.toLowerCase();
		return result;
	}

}
//END OF FILE
//START OF FILE: src/main/runtests.java
package main;

import gradingTools.comp401f16.assignment4.testcases.Assignment4Suite;

public class RunTests {

	public static void main(String[] args) {
		Assignment4Suite.main(args);

	}

}
//END OF FILE
//START OF FILE: src/main/say.java
package main;

import util.annotations.EditablePropertyNames;
import util.annotations.PropertyNames;
import util.annotations.StructurePattern;
import util.annotations.StructurePatternNames;
import util.annotations.Tags;

@Tags({ "Say" })
@StructurePattern(StructurePatternNames.BEAN_PATTERN)
@PropertyNames({ "Input", "Value" })
@EditablePropertyNames({ "Input" })

public class Say implements Token, TokenWord {

	private String scannedString;

	public Say(String token) {
		scannedString = token;
	}

	@Override
	public void setInput(String scannedString) {
		this.scannedString = scannedString;
	}

	@Override
	public String getInput() {
		return scannedString;
	}

	@Override
	public String getValue() {
		String result = "";
		result = scannedString.toLowerCase();
		return result;
	}

}
//END OF FILE
//START OF FILE: src/main/scannerbean.java
package main;

public class ScannerBean implements Token {

	private String scannedString = "";
	private Token[] Tokens;

	@Override
	public void setInput(String myString) {
		scanString(myString);
	}

	@Override
	public String getInput() {
		return scannedString;
	}

	public Token[] getTokens() {
		return Tokens;
	}

	public void scanString(String myString) {
		int start = 0;
		int counter = 0;
		Token[] largeArray = new Token[100];

		System.out.println(largeArray);

		while (start < myString.length()) {
			if (Character.isDigit(myString.charAt(start))) {
				int end = indexOf(myString, ' ', start);
				String token = myString.substring(start, end);
				Number scannedNumber = new Number(token);
				start = end + 1;
				largeArray[counter] = scannedNumber;
				counter++;

			} else if (Character.isLetter(myString.charAt(start))) {
				int end = indexOf(myString, ' ', start);
				String token = myString.substring(start, end);

				if (token.equalsIgnoreCase("move")) {
					Move scannedMove = new Move(token);
					start = end + 1;
					largeArray[counter] = scannedMove;
					counter++;

				} else if (token.equalsIgnoreCase("say")) {
					Say scannedSay = new Say(token);
					start = end + 1;
					largeArray[counter] = scannedSay;
					counter++;

				} else if (token.equalsIgnoreCase("repeat")) {
					Repeat scannedRepeat = new Repeat(token);
					start = end + 1;
					largeArray[counter] = scannedRepeat;
					counter++;

				} else if (token.equalsIgnoreCase("approach")) {
					Approach scannedApproach = new Approach(token);
					start = end + 1;
					largeArray[counter] = scannedApproach;
					counter++;

				} else if (token.equalsIgnoreCase("pass")) {
					Pass scannedPass = new Pass(token);
					start = end + 1;
					largeArray[counter] = scannedPass;
					counter++;

				} else if (token.equalsIgnoreCase("fail")) {
					Fail scannedFail = new Fail(token);
					start = end + 1;
					largeArray[counter] = scannedFail;
					counter++;

				} else {
					Word scannedWord = new Word(token);
					start = end + 1;
					largeArray[counter] = scannedWord;
					counter++;
				}

			} else if (myString.charAt(start) == '"') {
				int subStart = start + 1;
				int subEnd = indexOf(myString, '"', subStart);
				int end = indexOf(myString, ' ', subEnd);
				String token = myString.substring(subStart, subEnd);
				Quote scannedQuote = new Quote(token);
				start = end + 1;
				largeArray[counter] = scannedQuote;
				counter++;

			} else if (myString.charAt(start) == '+') {
				int end = indexOf(myString, ' ', start);
				String token = myString.substring(start, end);
				Plus scannedPlus = new Plus(token);
				start = end + 1;
				largeArray[counter] = scannedPlus;
				counter++;

			} else if (myString.charAt(start) == '-') {
				int end = indexOf(myString, ' ', start);
				String token = myString.substring(start, end);
				Minus scannedMinus = new Minus(token);
				start = end + 1;
				largeArray[counter] = scannedMinus;
				counter++;

			} else if (myString.charAt(start) == '}') {
				int end = indexOf(myString, ' ', start);
				String token = myString.substring(start, end);
				End scannedEnd = new End(token);
				start = end + 1;
				largeArray[counter] = scannedEnd;
				counter++;

			} else if (myString.charAt(start) == '{') {
				int end = indexOf(myString, ' ', start);
				String token = myString.substring(start, end);
				Start scannedStart = new Start(token);
				start = end + 1;
				largeArray[counter] = scannedStart;
				counter++;

			} else {
				start++;
			}

		}
		Tokens = new Token[counter];
		for (int i = 0; i < counter; i++) {
			Tokens[i] = largeArray[i];

		}
		System.out.println("String?");
	}

	public static int indexOf(String s, char ch, int fromIndex) {
		for (; fromIndex < s.length(); fromIndex++) {
			if (s.charAt(fromIndex) == ch) {
				return fromIndex;

			}
		}
		return fromIndex;
	}

} // end
//END OF FILE
//START OF FILE: src/main/sleep.java
package main;

import util.annotations.EditablePropertyNames;
import util.annotations.PropertyNames;
import util.annotations.StructurePattern;
import util.annotations.StructurePatternNames;
import util.annotations.Tags;

@Tags({ "Sleep" })
@StructurePattern(StructurePatternNames.BEAN_PATTERN)
@PropertyNames({ "Input", "Value" })
@EditablePropertyNames({ "Input" })

public class Sleep implements Token, TokenWord {

	private String scannedString;

	public Sleep(String token) {
		scannedString = token;
	}

	@Override
	public void setInput(String scannedString) {
		this.scannedString = scannedString;
	}

	@Override
	public String getInput() {
		return scannedString;
	}

	@Override
	public String getValue() {
		String result = "";
		result = scannedString.toLowerCase();
		return result;
	}

}
//END OF FILE
//START OF FILE: src/main/start.java
package main;

import util.annotations.EditablePropertyNames;
import util.annotations.PropertyNames;
import util.annotations.StructurePattern;
import util.annotations.StructurePatternNames;
import util.annotations.Tags;

@Tags({ "Start" })
@StructurePattern(StructurePatternNames.BEAN_PATTERN)
@PropertyNames({ "Input", "Value" })
@EditablePropertyNames({ "Input" })

public class Start implements Token {

	private String scannedString;

	public Start(String token) {
		scannedString = token;
	}

	@Override
	public void setInput(String scannedString) {
		this.scannedString = scannedString;

	}

	@Override
	public String getInput() {
		return scannedString;
	}

}
//END OF FILE
//START OF FILE: src/main/thread.java
package main;

import util.annotations.EditablePropertyNames;
import util.annotations.PropertyNames;
import util.annotations.StructurePattern;
import util.annotations.StructurePatternNames;
import util.annotations.Tags;

@Tags({ "Thread" })
@StructurePattern(StructurePatternNames.BEAN_PATTERN)
@PropertyNames({ "Input", "Value" })
@EditablePropertyNames({ "Input" })

public class Thread implements Token, TokenWord {

	private String scannedString;

	public Thread(String token) {
		scannedString = token;
	}

	@Override
	public void setInput(String scannedString) {
		this.scannedString = scannedString;
	}

	@Override
	public String getInput() {
		return scannedString;
	}

	@Override
	public String getValue() {
		String result = "";
		result = scannedString.toLowerCase();
		return result;
	}

}
//END OF FILE
//START OF FILE: src/main/token.java
package main;

import util.annotations.EditablePropertyNames;
import util.annotations.PropertyNames;
import util.annotations.StructurePattern;
import util.annotations.Tags;

@StructurePattern("Bean Pattern")
@PropertyNames({ "Input", "Value" })
@EditablePropertyNames({ "InputString" })
@Tags({ "Token", "Number", "End", "Minus", "Plus", "QuotedString", "Start", "Word", "Approach", "Call", "Define",
		"Fail", "Move", "Pass", "ProceedAll", "Redo", "Repeat", "Say", "Sleep", "Thread", "Under", "Wait", })

public interface Token {

	public void setInput(String scannedString);

	public String getInput();

}
//END OF FILE
//START OF FILE: src/main/tokennumber.java
package main;

import util.annotations.EditablePropertyNames;
import util.annotations.PropertyNames;
import util.annotations.StructurePattern;
import util.annotations.StructurePatternNames;
import util.annotations.Tags;

@Tags({ "TokenNumber", "Number" })
@StructurePattern(StructurePatternNames.BEAN_PATTERN)
@PropertyNames({ "Input", "Value" })
@EditablePropertyNames({ "Input" })

public interface TokenNumber {

	public int getValue();

}
//END OF FILE
//START OF FILE: src/main/tokenword.java
package main;

import util.annotations.EditablePropertyNames;
import util.annotations.PropertyNames;
import util.annotations.StructurePattern;
import util.annotations.StructurePatternNames;
import util.annotations.Tags;

@Tags({ "TokenWord", "Word" })
@StructurePattern(StructurePatternNames.BEAN_PATTERN)
@PropertyNames({ "Input", "Value" })
@EditablePropertyNames({ "Input" })

public interface TokenWord {

	public String getValue();

}
//END OF FILE
//START OF FILE: src/main/undo.java
package main;

import util.annotations.EditablePropertyNames;
import util.annotations.PropertyNames;
import util.annotations.StructurePattern;
import util.annotations.StructurePatternNames;
import util.annotations.Tags;

@Tags({ "Undo" })
@StructurePattern(StructurePatternNames.BEAN_PATTERN)
@PropertyNames({ "Input", "Value" })
@EditablePropertyNames({ "Input" })

public class Undo implements Token, TokenWord {

	private String scannedString;

	public Undo(String token) {
		scannedString = token;
	}

	@Override
	public void setInput(String scannedString) {
		this.scannedString = scannedString;
	}

	@Override
	public String getInput() {
		return scannedString;
	}

	@Override
	public String getValue() {
		String result = "";
		result = scannedString.toLowerCase();
		return result;
	}

}
//END OF FILE
//START OF FILE: src/main/wait.java
package main;

import util.annotations.EditablePropertyNames;
import util.annotations.PropertyNames;
import util.annotations.StructurePattern;
import util.annotations.StructurePatternNames;
import util.annotations.Tags;

@Tags({ "Wait" })
@StructurePattern(StructurePatternNames.BEAN_PATTERN)
@PropertyNames({ "Input", "Value" })
@EditablePropertyNames({ "Input" })

public class Wait implements Token, TokenWord {

	private String scannedString;

	public Wait(String token) {
		scannedString = token;
	}

	@Override
	public void setInput(String scannedString) {
		this.scannedString = scannedString;
	}

	@Override
	public String getInput() {
		return scannedString;
	}

	@Override
	public String getValue() {
		String result = "";
		result = scannedString.toLowerCase();
		return result;
	}

}
//END OF FILE
//START OF FILE: src/main/word.java
package main;

import util.annotations.EditablePropertyNames;
import util.annotations.PropertyNames;
import util.annotations.StructurePattern;
import util.annotations.StructurePatternNames;
import util.annotations.Tags;

@Tags({ "Word" })
@StructurePattern(StructurePatternNames.BEAN_PATTERN)
@PropertyNames({ "Input", "Value" })
@EditablePropertyNames({ "Input" })

public class Word implements Token, TokenWord {

	private String scannedString;

	public Word(String token) {
		scannedString = token;
	}

	@Override
	public void setInput(String scannedString) {
		this.scannedString = scannedString;
	}

	@Override
	public String getInput() {
		return scannedString;
	}

	@Override
	public String getValue() {
		String result = "";
		result = scannedString.toLowerCase();
		return result;
	}

}
//END OF FILE
