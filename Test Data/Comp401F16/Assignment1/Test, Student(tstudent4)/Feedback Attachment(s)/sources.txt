//START OF FILE: src/main/assignment1.java
package main;

import java.util.Scanner;

import mp.scanner.ScanningIterator;

public class Assignment1 {
	
	public static void main(String[] args) {
		processInput();
		System.out.println("Goodbye!");
	}
	
	/**
	 * 
	 */
	private static void processInput(){

		Scanner in = new Scanner(System.in);
		System.out.println("String?");
		String line = in.nextLine();
		while (line.charAt(0) != '.'){
			scanString(line);
			line = in.nextLine();
		}
	}
	
	/**
	 * Produces output from each string
	 */
	private static void scanString(String s){
		
		int product = 0;
		boolean firstToken = true; // used for adjusting product starting value
		int sum = 0;
		
		// Gather tokens
		ScanningIterator iterator = new ScanningIterator(s);
		System.out.println("Tokens:");
		while (iterator.hasNext()){
		
			String token = iterator.next();
			
			// Check if invalid
			boolean valid = true;
			for (int i = 0; i < token.length(); ++i){
				if (!Character.isDigit(token.charAt(i))){
					valid = false;
					break;
				}
			}
			if (!valid){
				System.out.println("Invalid token: " + token);
				continue;
			}
			
			System.out.println(token);
			
			// Update counts. Product needs to be set to 1 if this is the first token
			// so that things can be multiplied into it.
			if (firstToken){
				product = 1;
				firstToken = false;
			}
			product *= Integer.parseInt(token);
			sum += Integer.parseInt(token);
			
		}//end gathering tokens
		
		System.out.println("Sum: " + sum);
		System.out.println("Product: " + product);
	}
	
}
//END OF FILE
//START OF FILE: src/mp/scanner/scanningiterator.java
package mp.scanner;

import java.util.Iterator;

public class ScanningIterator implements Iterator<String>{

	private String stringData;
	private int position = 0;
	
	/**
	 * Constructor
	 * @param s string to iterate over
	 */
	public ScanningIterator(String s){
		stringData = s;
	}

	/**
	 * Checks whether there is another token to be had
	 */
	@Override
	public boolean hasNext() {
		
		// Consume spaces
		position = indexOfNot(stringData, ' ', position);
		if (position == -1){
			position = stringData.length();
		}
		return (position < stringData.length());
	}

	@Override
	/**
	 * Gets the next token
	 */
	public String next() {
		
		// Consume spaces
		position = indexOfNot(stringData, ' ', position);
		if (position == -1){
			
			// Rest of string was spaces
			position = stringData.length();
			return "";
		}
		
		// Get token
		int tokenStart = position;
		int tokenEnd = indexOf(stringData, ' ', tokenStart);
		if (tokenEnd == -1){
			
			// Rest of string is digits
			tokenEnd = stringData.length();
		}
		position = tokenEnd;
		
		return stringData.substring(tokenStart, tokenEnd);
	}
	
	/**
	 * Returns index of first character equal to ch
	 * @param s
	 * @param ch
	 * @param fromIndex
	 * @return
	 */
	public static int indexOf(String s, char ch, int fromIndex){
		for (int i=fromIndex; i < s.length(); ++i){
			if (s.charAt(i)==ch){
				return i;
			}
		}
		return -1;
	}

	/**
	 * Returns index of first character not equal to ch
	 * 
	 * @param s
	 * @param ch
	 * @param fromIndex
	 * @return
	 */
	public static int indexOfNot(String s, char ch, int fromIndex){
		for (int i=fromIndex; i < s.length(); ++i){
			if (s.charAt(i)!=ch){
				return i;
			}
		}
		return -1;
	}

}
//END OF FILE
