//START OF FILE: src/grail/beanstringscanner.java
package grail;

import util.annotations.EditablePropertyNames;
import util.annotations.PropertyNames;
import util.annotations.StructurePattern;
import util.annotations.StructurePatternNames;
import util.annotations.Tags;


@Tags({"ScannerBean"})
@StructurePattern(StructurePatternNames.BEAN_PATTERN)
@PropertyNames({"scannedString"})
@EditablePropertyNames({"scannedString"})

public class BeanStringScanner {
	private String scannedString;
	
	public void setScannedString(String str)
	{
		scannedString=str;
		scanString(str);
	}
	public String getScannedString(){
		return scannedString;
	}
	
	private void scanString(String line)
	{
		
		char c; 
		int quota=0;// to remember the number of quotas
		int flag=0;//word:1, number:2
		String numberPreToken="number: ";
		String wordPreToken="word: ";
		String signPreToken="sign: ";
		StringBuffer word=new StringBuffer();
		 for (int i=0;i<line.length();i++)
		 {
			 c=line.charAt(i);
			 if (c=='"')
			 {
				 quota++;
				 if(quota==2)//output word
				 {
					 System.out.println("quoted string: "+word);
					 word.delete(0,word.length());
					 flag=0;
					 quota=0;
				 }else if (quota==1)
				 {
					//donothing, not allow word or number to output
				 }else
				 {
					 continue;
				 }
			 }
			 else if (Character.isDigit(c))
			 {
				 flag=1;
				 word.append(c);
			 }
			 else if (Util.isLetter(c))
			 {
				 flag=2;
				 word.append(c); 
			 }
			 else if(c==' ')
			 {
				 if (quota==1)
				 {
					 word.append(c);
					 continue;
				 }
				 if (flag==1){
					 int num=Integer.parseInt(word.toString());
					 System.out.println(numberPreToken+num);
					 flag=0;
					 word.delete(0, word.length());
				 }
				 else if (flag==2)
				 {
					 System.out.println(wordPreToken+word);
					 flag=0;
					 word.delete(0, word.length());
				 }else//continuous space after word 
				 {
					 continue;
				 }
			 }
			 else if (c=='+'||c=='-')//we should also ouput "+" or "-"
			 {
				 if (quota==1)
				 {
					 word.append(c);
					 continue;
				 }
				 if (flag==1){
					 int num=Integer.parseInt(word.toString());
					 System.out.println(numberPreToken+num);
					 System.out.println(signPreToken+c);
					 flag=0;
					 word.delete(0, word.length());
				 }
				 else if (flag==2)
				 {
					 System.out.println(wordPreToken+word);
					 System.out.println(signPreToken+c);
					 flag=0;
					 word.delete(0, word.length());
				 }else//continuous space after word 
				 {
					 continue;
				 }
			 }
			 else//other character, for example, symbols
			 {
				word.append(c);
			 }
		 }
		if (quota==1)
		{
			System.out.println("closed quota is missing.....");
			System.out.println(word);
		}
		else//output the last word
		{
			 if (flag==1){
				 int num=Integer.parseInt(word.toString());
				 System.out.println(numberPreToken+num);
				 flag=0;
				 word.delete(0, word.length());
			 }
			 else if (flag==2)
			 {
				 System.out.println(wordPreToken+word);
				 flag=0;
				 word.delete(0, word.length());
			 }
		}
	}

}
//END OF FILE
//START OF FILE: src/grail/stringscanner.java
package grail;

public class StringScanner {

	public static void myScanner(String line)
	{
		
		char c; 
		int quota=0;// to remember the number of quotas
		int flag=0;//word:1, number:2
		StringBuffer word=new StringBuffer();
		String numberPreToken="number: ";
		String wordPreToken="word: ";
		String signPreToken="sign: ";
		 for (int i=0;i<line.length();i++)
		 {
			 c=line.charAt(i);
			 if (c=='"')
			 {
				 quota++;
				 if(quota==2)//output word
				 {
					 System.out.println("quoted string: "+word);
					 word.delete(0,word.length());
					 flag=0;
					 quota=0;
				 }else if (quota==1)
				 {
					//donothing, not allow word or number to output
				 }else
				 {
					 continue;
				 }
			 }
			 else if (Character.isDigit(c))
			 {
				 flag=1;
				 word.append(c);
			 }
			 else if (Character.isLetter(c))
			 {
				 flag=2;
				 word.append(c); 
			 }
			 else if(c==' ')
			 {
				 if (quota==1)
				 {
					 word.append(c);
					 continue;
				 }
				 if (flag==1){
					 int num=Integer.parseInt(word.toString());
					 System.out.println(numberPreToken+num);
					 flag=0;
					 word.delete(0, word.length());
				 }
				 else if (flag==2)
				 {
					 System.out.println(wordPreToken+word);
					 flag=0;
					 word.delete(0, word.length());
				 }else//continuous space after word 
				 {
					 continue;
				 }
			 }
			 else if (c=='+'||c=='-')//we should also ouput "+" or "-"
			 {
				 if (quota==1)
				 {
					 word.append(c);
					 continue;
				 }
				 if (flag==1){
					 int num=Integer.parseInt(word.toString());
					 System.out.println(numberPreToken+num);
					 System.out.println(signPreToken+c);
					 flag=0;
					 word.delete(0, word.length());
				 }
				 else if (flag==2)
				 {
					 System.out.println(wordPreToken+word);
					 System.out.println(signPreToken+c);
					 flag=0;
					 word.delete(0, word.length());
				 }else//continuous space after word 
				 {
					 continue;
				 }
			 }
			 else//other character, for example, symbols
			 {
				word.append(c);
			 }
		 }
		if (quota==1)
		{
			System.out.println("closed quota is missing.....");
			System.out.println(word);
		}
		else//output the last word
		{
			 if (flag==1){
				 int num=Integer.parseInt(word.toString());
				 System.out.println(numberPreToken+num);
				 flag=0;
				 word.delete(0, word.length());
			 }
			 else if (flag==2)
			 {
				 System.out.println(wordPreToken+word);
				 flag=0;
				 word.delete(0, word.length());
			 }
		}
	}
}
//END OF FILE
//START OF FILE: src/grail/util.java
package grail;

public class Util {
	public static boolean isLetter(char c)
	{
		return 'a'<=c&&c<='z'||'A'<=c&&c<='Z';
	}
}
//END OF FILE
//START OF FILE: src/main/assignment2.java
package main;

import grail.BeanStringScanner;
import grail.StringScanner;
import grail.Util;

import java.util.Scanner;
/**
 * 
 * @author Dong Nie
 * dongnie@cs.unc.edu
 *
 *This is for assignment2 from comp 401
 */
public class Assignment2 {

	public static void main(String[] args) {
		// TODO Auto-generated method stub
		System.out.println("please enter a string:");
		Scanner scan = new Scanner(System.in);
		String line="";
		BeanStringScanner bss=new BeanStringScanner();
		while(true)
		{
		 line = scan.nextLine();
		 //if(line.equals(""))
			// continue;
		 if (line.charAt(0)=='.')
		 {
			 break;
		 }
		 //System.out.println("Processed by ordinary class");
		 //StringScanner.myScanner(line); 
		 System.out.println("Processed by bean class");
		 //test bean scanner
		 bss.setScannedString(line);
		}
	}

}
//END OF FILE
