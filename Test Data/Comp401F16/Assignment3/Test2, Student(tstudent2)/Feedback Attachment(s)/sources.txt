//START OF FILE: src/grail/scannerbean.java
package grail;

import util.annotations.EditablePropertyNames;
import util.annotations.PropertyNames;
import util.annotations.StructurePattern;
import util.annotations.StructurePatternNames;
import util.annotations.Tags;

import java.util.Iterator;

import grail.interfaces.Number;
import grail.interfaces.ScannerBeanInterface;
import grail.interfaces.Token;
import grail.interfaces.Word;
import mp.scanner.ScanningIterator;


/**
 * A "Bean" object whose setter for scannedString prints the tokens and their types.
 * @author Semion
 *
 */
@Tags({"ScannerBean"})
@StructurePattern(StructurePatternNames.BEAN_PATTERN)
@PropertyNames({"ScannedString"})
@EditablePropertyNames({"ScannedString"})
public class ScannerBean implements ScannerBeanInterface {

	String scannedString;
	
	@Override
	public String getScannedString(){
		return scannedString;
	};
	
	@Override
	public void setScannedString(String s){
		scanString(s);
		scannedString = s;
	};
	
	/**
	 * Produces output from each string
	 */
	private static void scanString(String s){
		
		Iterator<String> iterator = new ScanningIterator(s);
		Token tokenObject;
		
		System.out.println("Tokens:");
		
		while (iterator.hasNext()){
			String tokenString = iterator.next();

			boolean valid = true; // will be used to mark invalid tokens
			
			// Check for number
			if (Character.isDigit(tokenString.charAt(0))){
				valid = isValidNumber(tokenString);
				if (valid){

					System.out.println("@Number");
					System.out.println(tokenString);
					System.out.println(Integer.parseInt(tokenString));
				}
				
			// Check for word
			} else if (Character.isLetter(tokenString.charAt(0))){
				valid = isValidWord(tokenString);
				if (valid){
					System.out.println("@Word");
					System.out.println(tokenString);
					System.out.println(tokenString.toLowerCase());
				}
			
			// Check for quoted string
			} else if (tokenString.charAt(0) == '\"'){
				
				// The only invalid token would be an empty quoted string
				if (tokenString.length() <= "\"\"".length()){
					valid = false;
				}
				
				if (valid){
					
					// Trim quotation marks off the ends of the token
					tokenString = tokenString.substring(1, tokenString.length()-1);
					System.out.println("@Quote");
					System.out.println(tokenString);
				}
			
			// Check for sign (these comparisons would be simpler if we were allowed to use .equals())
			} else if (tokenString.length() == 1 && (tokenString.charAt(0) == '+')){
				System.out.println("@Plus");
				System.out.println(tokenString);
				
			} else if (tokenString.length() == 1 && (tokenString.charAt(0) == '-')){
				System.out.println("@Minus");
				System.out.println(tokenString);
			
			// Check for "start" token
			} else if (tokenString.length() == 1 && tokenString.charAt(0) == '{'){
				System.out.println("@Start");
				System.out.println(tokenString);
				
			// Check for "end" token
			} else if (tokenString.length() == 1 && tokenString.charAt(0) == '}'){
				System.out.println("@End");
				System.out.println(tokenString);
				
			// Otherwise invalid
			} else{
				valid = false;
			}
			
			if (!valid){
				System.out.print("INVALID TOKEN: ");
				System.out.println(tokenString);
			}
			
		}//end printing tokens
	}//end scanString()
	
	private static boolean isValidWord(String s){
		
		// Assume correct to begin with
		boolean validity = true;
		
		// Go through and stop at any invalid character
		for (int i = 0; i < s.length(); ++i){
			if (!Character.isLetter(s.charAt(i))){
				validity = false;
				break;
			}
		}
		return validity;
	}
	
	private static boolean isValidNumber(String s){
		
		// Assume correct to begin with
		boolean validity = true;
		
		// Go through and stop at any invalid character
		for (int i = 0; i < s.length(); ++i){
			if (!Character.isDigit(s.charAt(i))){
				validity = false;
				break;
			}
		}
		return validity;
	}
}//end class
//END OF FILE
//START OF FILE: src/grail/interfaces/end.java
package grail.interfaces;
import util.annotations.Tags;

@Tags({"End"})
public interface End extends Token{

}
//END OF FILE
//START OF FILE: src/grail/interfaces/minus.java
package grail.interfaces;
import util.annotations.Tags;

@Tags({"Minus"})
public interface Minus extends Token{

}
//END OF FILE
//START OF FILE: src/grail/interfaces/number.java
package grail.interfaces;

import util.annotations.Tags;

@Tags({"Number"})
public interface Number extends Token {
	public int getValue();
}
//END OF FILE
//START OF FILE: src/grail/interfaces/plus.java
package grail.interfaces;
import util.annotations.Tags;

@Tags({"Plus"})
public interface Plus extends Token{

}
//END OF FILE
//START OF FILE: src/grail/interfaces/quote.java
package grail.interfaces;
import util.annotations.Tags;

@Tags({"Quote"})
public interface Quote extends Token{

}
//END OF FILE
//START OF FILE: src/grail/interfaces/scannerbeaninterface.java
package grail.interfaces;

import util.annotations.Tags;

@Tags({"ScannerBean"})
public interface ScannerBeanInterface {

	String getScannedString();

	void setScannedString(String s);

}
//END OF FILE
//START OF FILE: src/grail/interfaces/start.java
package grail.interfaces;
import util.annotations.Tags;

@Tags({"Start"})
public interface Start extends Token{

}
//END OF FILE
//START OF FILE: src/grail/interfaces/token.java
package grail.interfaces;

import util.annotations.Tags;

@Tags({"Token", "Number", "Word", "Quote", "Plus", "Minus", "Start", "End"})
public interface Token {
	
	public void setInput(String newString);
	public String getInput();

}
//END OF FILE
//START OF FILE: src/grail/interfaces/word.java
package grail.interfaces;
import util.annotations.Tags;

@Tags({"Word"})
public interface Word extends Token {
	public String getValue();
}
//END OF FILE
//START OF FILE: src/main/assignment3.java
package main;

import java.util.Scanner;

import grail.ScannerBean;
import grail.interfaces.ScannerBeanInterface;

public class Assignment3 {
	
	public static void main(String[] args) {
		processInput();
		System.out.println("Goodbye!");
	}
	
	private static void processInput(){

		Scanner in = new Scanner(System.in);
		ScannerBeanInterface myScanner = new ScannerBean();
		
		// Read first line
		System.out.println("String?");
		String line = in.nextLine();
		
		// Process until period
		while (line.isEmpty() || line.charAt(0) != '.'){
			
			myScanner.setScannedString(line);
			
			System.out.println("String?");
			line = in.nextLine();
		}
	}
	
	
	
}
//END OF FILE
//START OF FILE: src/main/testrunner.java
package main;

import gradingTools.comp401f16.assignment3.testcases.Assignment3Suite;

public class TestRunner {

	public static void main(String[] args) {
		Assignment3Suite.main(args);
	}

}
//END OF FILE
//START OF FILE: src/mp/scanner/scanningiterator.java
package mp.scanner;

import java.util.Iterator;

public class ScanningIterator implements Iterator<String>{

	private String stringData;
	private int position = 0;
	
	/**
	 * Constructor
	 * @param s string to iterate over
	 */
	public ScanningIterator(String s){
		stringData = s;
	}

	/**
	 * Checks whether there is another token to be had
	 */
	@Override
	public boolean hasNext() {
		
		// Consume spaces
		position = indexOfNot(stringData, ' ', position);
		if (position == -1){
			position = stringData.length();
		}
		return (position < stringData.length());
	}

	/**
	 * Gets the next token
	 */
	@Override
	public String next() {
		
		// Consume spaces
		position = indexOfNot(stringData, ' ', position);
		if (position == -1){
			
			// Rest of string was spaces
			position = stringData.length();
			return "";
		}
		
		// Get token
		int tokenStart = position;
		int tokenEnd = position;
		
		// Treat quoted strings differently
		if (stringData.charAt(tokenStart) == '\"'){
			
			// Look for the closing quote after this quote
			tokenEnd = indexOf(stringData, '\"', tokenStart + 1);
			
			if (tokenEnd == -1){
				System.out.println("ERROR: No closing quote found. Assumed line end to be closing quote.");
				tokenEnd = stringData.length();
				position = tokenEnd;
				return stringData.substring(tokenStart, tokenEnd)+ "\"";
			
			// If closing quote exists, make sure it is grabbed
			} else {
				++tokenEnd;
			}
			
		// If not a quoted string, end of token is a space or line end	
		} else {
			tokenEnd = indexOf(stringData, ' ', tokenStart);
		}
			
		if (tokenEnd == -1){
			tokenEnd = stringData.length();
		}
		
		position = tokenEnd;
		
		return stringData.substring(tokenStart, tokenEnd);
	}
	
	/**
	 * Returns index of first character equal to ch
	 * @param s
	 * @param ch
	 * @param fromIndex index at which to start search
	 * @return index of first ocurrence of ch after fromIndex, or -1 if not found
	 */
	private static int indexOf(String s, char ch, int fromIndex){
		for (int i=fromIndex; i < s.length(); ++i){
			if (s.charAt(i)==ch){
				return i;
			}
		}
		return -1;
	}

	/**
	 * Returns index of first character not equal to ch
	 * 
	 * @param s
	 * @param ch
	 * @param fromIndex index at which to start search
	 * @return index of first character that is not ch after fromIndex, or -1 if no non-ch characters found
	 */
	private static int indexOfNot(String s, char ch, int fromIndex){
		for (int i=fromIndex; i < s.length(); ++i){
			if (s.charAt(i)!=ch){
				return i;
			}
		}
		return -1;
	}

}
//END OF FILE
