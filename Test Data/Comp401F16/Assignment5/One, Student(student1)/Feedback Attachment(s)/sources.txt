//START OF FILE: src/grail/shapes/allfiveguys.java
package grail.shapes;

import util.annotations.StructurePattern;
import util.annotations.StructurePatternNames;
import util.annotations.Tags;

@StructurePattern(StructurePatternNames.BEAN_PATTERN)
@Tags({"BridgeScene"})


public class AllFiveGuys implements AllFiveGuysInterface{
  AvatarClass guard, arthur, lancelot, robin, galahad;
    
  public AllFiveGuys(){
      guard = new AvatarClass("guard.jpg");
      arthur = new AvatarClass("arthur.jpg");
      lancelot = new AvatarClass("lancelot.jpg");
      robin = new AvatarClass("robin.jpg");
      galahad = new AvatarClass("galahad.jpg");
      
      arthur.moveBody(null, 200,0);
      lancelot.moveBody(null, -200, 0);
      robin.moveBody(null, 400, 0);
      galahad.moveBody(null, 600, 0);

     
    }
  
  public AvatarClass getGuard(){
    return guard;
  }
  public AvatarClass getArthur(){
    return arthur;
  }
  public AvatarClass getLancelot(){
    return lancelot;
  }
  public AvatarClass getRobin() {
    return robin;
  }
  public AvatarClass getGalahad(){
    return galahad;
  }
}
//END OF FILE
//START OF FILE: src/grail/shapes/allfiveguysinterface.java
package grail.shapes;

public interface AllFiveGuysInterface {
  public AvatarClass getGuard();
  public AvatarClass getArthur();
  public AvatarClass getLancelot();
  public AvatarClass getRobin();
  public AvatarClass getGalahad();
}
//END OF FILE
//START OF FILE: src/grail/shapes/angle.java
package grail.shapes;

import util.annotations.StructurePattern;
import util.annotations.StructurePatternNames;
import util.annotations.Tags;

@StructurePattern(StructurePatternNames.BEAN_PATTERN) 
@Tags({"Angle"})

public class Angle implements VAngleShapeInterface {

  LineClass testLine, testLine1, testLine2, testLine3;


  public Angle(Point pointTheLinesMeet){
    testLine1 = new LineClass(pointTheLinesMeet, 75,75);
    testLine = new LineClass(pointTheLinesMeet, -75, 75);
  }
  
  public LineClass getLeftLine(){
    return testLine;
  }
  public LineClass getRightLine(){
    return testLine1;
  }
  public void moveVShape(Point pointTheLinesMeet, int movedX, int movedY){
    pointTheLinesMeet.movePoint(movedX, movedY);
  }
  
  

}
//END OF FILE
//START OF FILE: src/grail/shapes/avatarclass.java
package grail.shapes;

import util.annotations.StructurePattern;
import util.annotations.Tags;

@StructurePattern("Bean Pattern")
@Tags({"Avatar"})

public class AvatarClass implements AvatarClassInterface{
  HeadPictures headTest;
  Angle arms, legs;
  LineClass body;
  Point bodyPoint = new Point(300, 200);  
  Point armsPoint = new Point(300, 200);
  Point legsPoint = new Point(300, 300);
  SpeechText newText;


  public AvatarClass(String jpeg){
  headTest = new HeadPictures(jpeg, 250, 100, 100, 100);
  arms = new Angle(armsPoint);
  legs = new Angle(legsPoint);
  body = new LineClass(bodyPoint, 0, 100);
  newText = new SpeechText("Arthur takes a Walk", 450, 50);
    }
  
  
  public HeadPictures getHead(){
    return headTest;
    }
  public Angle getArms(){
    return arms;
  }
  public Angle getLegs(){
    return legs;
  }
  public LineClass getBody(){
    return body;
  }
  public SpeechText getStringShape(){
    return newText;
  }

  @Tags({"move"})
  public void moveBody(Point point, int movedX, int movedY){
    arms.moveVShape(armsPoint, movedX, movedY);
    legs.moveVShape(legsPoint, movedX, movedY);
    bodyPoint.movePoint(movedX, movedY);
    headTest.movePicture(movedX, movedY);
  }
  

  
  

 }
//END OF FILE
//START OF FILE: src/grail/shapes/avatarclassinterface.java
package grail.shapes;

public interface AvatarClassInterface {
  public HeadPictures getHead();
  public Angle getArms();
  public LineClass getBody();
  public SpeechText getStringShape();
  public Angle getLegs();
  public void moveBody(Point point, int movedX, int movedY);
}
//END OF FILE
//START OF FILE: src/grail/shapes/headpictures.java
package grail.shapes;

import util.annotations.StructurePattern;
import util.annotations.StructurePatternNames;

@StructurePattern(StructurePatternNames.IMAGE_PATTERN)

public class HeadPictures implements HeadPicturesInterface {
  String imageFileName;
  int x, y, height, width;
  
  public HeadPictures(String initialImageFileName, int initialX, int initialY, int initialHeight, int initialWidth){
    imageFileName = initialImageFileName;
    x = initialX;
    y = initialY;    
    height = initialHeight;
    width = initialWidth;
    
  }
  
  public void setImageFileName(String newImage){
    imageFileName = newImage;
  }
  
  public String getImageFileName(){
    return imageFileName;
  }
  
  public void setX (int newX) {
    x = newX;
  }
  
  public int getX (){
    return x;
  }
  
  public void setY(int newY){
    y = newY;
  }
  
  public int getY(){
    return y;
  }
 
  public void setHeight(int newHeight){
    height = newHeight;
  }
  
  public int getHeight(){
    return height;
  }
  
  public void setWidth(int newWidth){
    width = newWidth;
  }
  
  public int getWidth(){
    return width;
  }
  
  public void movePicture(int movedX, int movedY){
    x = x + movedX;
    y = y + movedY;
  }
}
  
//END OF FILE
//START OF FILE: src/grail/shapes/headpicturesinterface.java
package grail.shapes;

public interface HeadPicturesInterface {
  public String getImageFileName();
  public void setImageFileName(String newImage);
  public int getX();
  public void setX (int newX);
  public int getY();
  public void setY(int newY);
  public int getHeight();
  public void setHeight(int newHeight);
  public int getWidth();
  public void setWidth(int newWidth);
  public void movePicture(int movedX, int movedY);
}
//END OF FILE
//START OF FILE: src/grail/shapes/lineclass.java
package grail.shapes;
import util.annotations.StructurePattern;
import util.annotations.StructurePatternNames;
import util.annotations.Tags;
@StructurePattern(StructurePatternNames.LINE_PATTERN) 
@Tags({"Line"})

  public class LineClass implements LineClassInterface{
      int x = 100, y = 100;
      Point location;
      
      public LineClass (Point initialLocation, int initialX, int initialY) {
          location = initialLocation;
          x = initialX;
          y = initialY;  
      }
      
      public Point getLocation(){
        return location;
      }
      public void setLocation(Point newLocation){
        location = newLocation;
      }
      public int getWidth() {
        return x;
      }
      public void setWidth(int newVal) {
        x = newVal;
      }
      public int getHeight() {
        return y;
      }
      public void setHeight(int newHeight) {
        y = newHeight;
      }

  }


//END OF FILE
//START OF FILE: src/grail/shapes/lineclassinterface.java
package grail.shapes;

public interface LineClassInterface {
  public Point getLocation();
  public void setLocation(Point newLocation);
  public int getWidth();
  public void setWidth(int newY);
  public int getHeight();
  public void setHeight(int newLength);
  
  
}
//END OF FILE
//START OF FILE: src/grail/shapes/point.java
package grail.shapes;

import util.annotations.StructurePattern;
import util.annotations.StructurePatternNames;
import util.annotations.Tags;
@StructurePattern(StructurePatternNames.POINT_PATTERN)
@Tags({"Point"})


public class Point implements PointInterface {  
  protected int x, y;
  public Point(int movedX, int movedY) {
    x = movedX;
    y = movedY;
  }

  public int getX() {
    return x; 
  }
  public int getY() { 
    return y; 
  }
  public void setX(int newX) {
    x = newX;
  }
  public void setY(int newY) {
    y = newY;
  }
  public void movePoint(int newX, int newY){
    x = x + newX;
    y = y + newY;
  }
  
}
//END OF FILE
//START OF FILE: src/grail/shapes/pointinterface.java
package grail.shapes;

public interface PointInterface {
  public int getX();
  public int getY();
  public void setX(int newX);
  public void setY(int newY);
  public void movePoint(int newX, int newY);
}
//END OF FILE
//START OF FILE: src/grail/shapes/speechtext.java
package grail.shapes;
import util.annotations.StructurePattern;
import util.annotations.StructurePatternNames;
import util.annotations.Tags;
@StructurePattern(StructurePatternNames.STRING_PATTERN)
@Tags({"String"})

public class SpeechText {

    String text;
    int x = 100, y = 100;

    public SpeechText(String initText, int initX, int initY) {
      text = initText;
      x = initX;
      y = initY;
    }
    public int getX() {
      return x;
    }
    
    public void setX(int newX) {
      x = newX;
    }
    
    public int getY() {
      return y;
    }
    
    public void setY(int newY) {
      y = newY;
    }
    
    public String getText() {
      return text;
    }
    
    public void setText(String newVal) {
      text = newVal;
    }

  
}
//END OF FILE
//START OF FILE: src/grail/shapes/speechtextinterface.java
package grail.shapes;

public interface SpeechTextInterface {  
public int getX();
public void setX(int newX);
public int getY();
public void setY(int newY);
public String getText();
public void setText(String newText);

}
//END OF FILE
//START OF FILE: src/grail/shapes/vangleshapeinterface.java
package grail.shapes;

public interface VAngleShapeInterface {
  public LineClass getLeftLine();
  public LineClass getRightLine();
  public void moveVShape(Point pointTheLinesMeet, int movedX, int movedY);
}
//END OF FILE
//START OF FILE: src/main/approachtoken.java
package main;

import util.annotations.Tags;

@Tags({ "Approach" })
public class ApproachToken implements WordInterface, Token {
  private String Input;
  private String Value;

  public ApproachToken() {
    Input = "approach";
  }

  public void setInput(String scannedString) {
    Input = scannedString;
  }

  public String getInput() {
    return Input;
  }

  public String getValue() {
    Value = Input.toLowerCase();
    return Value;
  }

}
//END OF FILE
//START OF FILE: src/main/assignment5.java
package main;

import bus.uigen.OEFrame;
import bus.uigen.ObjectEditor;
import grail.shapes.AllFiveGuys;
import grail.shapes.AllFiveGuysInterface;

public class Assignment5 {
  
  public static void main(String[] args) {
    AllFiveGuysInterface test = new AllFiveGuys();
    
    OEFrame editor = ObjectEditor.edit(test);
    editor.setSize(1000,400);
    
    //demonstration of moving images
  for(int i=0;i<110;i++){
 sleep(50);
 if(i<50){
   test.getArthur().moveBody(null, 10,0);
 }
  else{
    test.getArthur().moveBody(null, 10, 0);
  }
  
  editor.refresh();
}
    
    
    
  }
  public static void sleep(long interval) {
    try {
        Thread.sleep(interval);
    } catch (Exception e) {
        e.printStackTrace();
    }
}
  
  
  
}

//END OF FILE
//START OF FILE: src/main/bean.java
package main;

import util.annotations.EditablePropertyNames;
import util.annotations.PropertyNames;
import util.annotations.StructurePattern;
import util.annotations.StructurePatternNames;
import util.annotations.Tags;
import util.annotations.Visible;

@Tags({ "ScannerBean" })
@StructurePattern(StructurePatternNames.BEAN_PATTERN)
@PropertyNames({ "ScannedString" })
@EditablePropertyNames({ "ScannedString" })

public class Bean {

  private String ScannedString;
  static Token[] largeArray = new Token[100];
  static Token[] globalVariable;

  @Visible(false)
  public String getScannedString() {
    return ScannedString;
  }

  public void setScannedString(String scannedString) {
    this.ScannedString = scannedString;
    scanString(scannedString);
    setTokens();
    getTokens();

  }

  public static void scanString(String scannedString) {
    char ch = ' ';
    int fromIndex = 0;
    indexOf(scannedString, ch, fromIndex);

  }

  @Visible(false)
  public static Token[] getTokens() {
    return globalVariable;
  }

  public static void setTokens() {
    int counter = 0;
    Token[] compactArray;
    for (int b = 0; b < largeArray.length; b++) {
      if (largeArray[b] != null) {
        counter++;
      }
    }
    compactArray = new Token[counter];
    for (int u = 0; compactArray.length > u; u++) {
      compactArray[u] = largeArray[u];
    }
    globalVariable = compactArray;
  }

  public static int indexOf(String s, char ch, int fromIndex) {

    int i = 0;
    int positionInArray = 0;
    int beginIndex = 0;
    int endIndex = 0;
    while (i < s.length()) {

      if (Character.isDigit(s.charAt(i))) { // digits
        beginIndex = i;
        while (i < s.length() && Character.isDigit(s.charAt(i))) {
          i++;
        }
        endIndex = i;
        NumberInterface printedNumber = new NumberToken();
        largeArray[positionInArray] = (Token) printedNumber;
        positionInArray++;
        ((Token) printedNumber).setInput(s.substring(beginIndex, endIndex));
        // System.out.println(s.substring(beginIndex, endIndex));
        System.out.println(printedNumber.getValue());
        printedNumber.getValue();
      }

      else if (Character.isLetter(s.charAt(i)) && s.charAt(i) != '"') { // words
        beginIndex = i;
        while (i < s.length() && Character.isLetter(s.charAt(i)) && s.charAt(i) != '"') {
          i++;
        }
        endIndex = i;
        WordInterface printedWord = new WordToken();
        largeArray[positionInArray] = (Token) printedWord;
        positionInArray++;
        ((Token) printedWord).setInput(s.substring(beginIndex, endIndex));
        // System.out.println(s.substring(beginIndex, endIndex));
        System.out.println(printedWord.getValue());
        printedWord.getValue();

        if (s.substring(beginIndex, endIndex).equalsIgnoreCase("move")) {
          Token newMoveToken = new MoveToken();
          largeArray[positionInArray] = newMoveToken;
          positionInArray++;
          newMoveToken.getInput();
        }
        if (s.substring(beginIndex, endIndex).equalsIgnoreCase("say")) {
          Token newSayToken = new SayToken();
          largeArray[positionInArray] = newSayToken;
          positionInArray++;
          newSayToken.getInput();

        }
        if (s.substring(beginIndex, endIndex).equalsIgnoreCase("approach")) {
          Token newApproachToken = new ApproachToken();
          largeArray[positionInArray] = newApproachToken;
          positionInArray++;
          newApproachToken.getInput();
        }
        if (s.substring(beginIndex, endIndex).equalsIgnoreCase("pass")) {
          Token newPassToken = new PassToken();
          largeArray[positionInArray] = newPassToken;
          positionInArray++;
          newPassToken.getInput();
        }
        if (s.substring(beginIndex, endIndex).equalsIgnoreCase("fail")) {
          Token newFailToken = new FailToken();
          largeArray[positionInArray] = newFailToken;
          positionInArray++;
          newFailToken.getInput();
        }

      }

      else if (s.charAt(i) == ch) { // spaces
        beginIndex = i + 1;
      }

      else if (s.charAt(i) == '"') { // quotes
        beginIndex = i;
        i++;
        while (s.charAt(i) != '"') {
          endIndex = i + 1;
          i++;
        }
        Token printedQuotedString = new QuotedStringToken();
        largeArray[positionInArray] = (Token) printedQuotedString;
        positionInArray++;
        printedQuotedString.setInput(s.substring(beginIndex, endIndex + 1));
        // System.out.println(s.substring(beginIndex, endIndex + 1));
        printedQuotedString.getInput();
        System.out.println(printedQuotedString.getInput());
        beginIndex = i + 1;
      }

      else if (s.charAt(i) == '.') {
        System.out.println("Goodbye");
        System.exit(0);

      }

      else if (s.charAt(i) == '{') {
        beginIndex = i;
        endIndex = i + 1;
        Token startToken = new StartClass();
        largeArray[positionInArray] = startToken;
        positionInArray++;
        startToken.getInput();

      } else if (s.charAt(i) == '}') {
        beginIndex = i;
        endIndex = i + 1;
        Token endToken = new EndClass();
        largeArray[positionInArray] = endToken;
        positionInArray++;
        endToken.getInput();
      }
      i++;

    }

    return i;

  }

}
//END OF FILE
//START OF FILE: src/main/endclass.java
package main;

import util.annotations.EditablePropertyNames;
import util.annotations.PropertyNames;
import util.annotations.StructurePattern;
import util.annotations.StructurePatternNames;
import util.annotations.Tags;

@Tags({ "End" })

@StructurePattern(StructurePatternNames.BEAN_PATTERN)
@PropertyNames({ "Input" })
@EditablePropertyNames({ "Input" })

public class EndClass implements Token {
  private String Input;

  public EndClass() {
    Input = "}";
  }

  public void setInput(String scannedString) {
    Input = scannedString;
  }

  public String getInput() {
    return Input;
  }

}
//END OF FILE
//START OF FILE: src/main/failtoken.java
package main;

import util.annotations.Tags;

@Tags({ "Fail" })
public class FailToken implements WordInterface, Token {
  private String Input;
  private String Value;

  public FailToken() {
    Input = "fail";
  }

  public void setInput(String scannedString) {
    Input = scannedString;
  }

  public String getInput() {
    return Input;
  }

  public String getValue() {
    Value = Input.toLowerCase();
    return Value;
  }

}
//END OF FILE
//START OF FILE: src/main/mainclass.java
package main;

import bus.uigen.OEFrame;
import bus.uigen.ObjectEditor;
import util.misc.ThreadSupport;

public class MainClass {
  public static void main(String[] args) {
    // Bean bean = new Bean();
    // Scanner scan = new Scanner(System.in);
    // String scanString = scan.nextLine();
    animateScanner();

    // while (scanString != null) {
    // bean.setScannedString(scanString);
    // scanString = scan.nextLine();
    // }
  }

  public static void animateScanner() {
    Bean bean = new Bean();
    OEFrame editor = ObjectEditor.edit(bean);
    ThreadSupport.sleep(3000);
    bean.setScannedString("MovE 050 {sAy \"hi\" repeat}");
    editor.refresh();
    ThreadSupport.sleep(3000);
    bean.setScannedString("aproach FAIL paass pass 03 \"ey\" ");
    editor.refresh();
    ThreadSupport.sleep(3000);
  }

}
//END OF FILE
//START OF FILE: src/main/movetoken.java
package main;

import util.annotations.Tags;

@Tags({ "Move" })
public class MoveToken implements WordInterface, Token {

  private String Input;
  private String Value;

  public MoveToken() {
    Input = "";
  }

  public void setInput(String scannedString) {
    Input = scannedString;
  }

  public String getInput() {
    return Input;
  }

  public String getValue() {
    Value = Input.toLowerCase();
    return Value;
  }

}
//END OF FILE
//START OF FILE: src/main/numberinterface.java
package main;

public interface NumberInterface {
  public int getValue();

}
//END OF FILE
//START OF FILE: src/main/numbertoken.java
package main;

import util.annotations.EditablePropertyNames;
import util.annotations.PropertyNames;
import util.annotations.StructurePattern;
import util.annotations.StructurePatternNames;
import util.annotations.Tags;

@Tags({ "Number" })
@StructurePattern(StructurePatternNames.BEAN_PATTERN)
@PropertyNames({ "ScannedString" })
@EditablePropertyNames({ "ScannedString" })

public class NumberToken implements NumberInterface, Token {
  private String Input;
  private int    Value;

  public NumberToken() {
    Input = "0";
  }

  public void setInput(String scannedString) {
    Input = scannedString;
  }

  public String getInput() {
    return Input;
  }

  public int getValue() {
    Value = Integer.parseInt(Input);
    return Value;
  }

}
//END OF FILE
//START OF FILE: src/main/passtoken.java
package main;

import util.annotations.Tags;

@Tags({ "Pass" })
public class PassToken implements WordInterface, Token {
  private String Input;
  private String Value;

  public PassToken() {
    Input = "";
  }

  public void setInput(String scannedString) {
    Input = scannedString;
  }

  public String getInput() {
    return Input;
  }

  public String getValue() {
    Value = Input.toLowerCase();
    return Value;
  }

}
//END OF FILE
//START OF FILE: src/main/quotedstringtoken.java
package main;

import util.annotations.EditablePropertyNames;
import util.annotations.PropertyNames;
import util.annotations.StructurePattern;
import util.annotations.StructurePatternNames;
import util.annotations.Tags;

@Tags({ "Quote" })
@StructurePattern(StructurePatternNames.BEAN_PATTERN)
@PropertyNames({ "ScannedString" })
@EditablePropertyNames({ "ScannedString" })

public class QuotedStringToken implements Token {
  private String Input;

  public QuotedStringToken() {
    Input = "";
  }

  public void setInput(String scannedString) {
    Input = scannedString;
  }

  public String getInput() {
    return Input;
  }

}
//END OF FILE
//START OF FILE: src/main/repeattoken.java
package main;

import util.annotations.Tags;

@Tags({ "Repeat" })

public class RepeatToken implements WordInterface, Token {
  private String Input;
  private String Value;

  public RepeatToken() {
    Input = "";
  }

  public void setInput(String scannedString) {
    Input = scannedString;
  }

  public String getInput() {
    return Input;
  }

  public String getValue() {
    Value = Input.toLowerCase();
    return Value;
  }

}
//END OF FILE
//START OF FILE: src/main/saytoken.java
package main;

import util.annotations.Tags;

@Tags({ "Say" })

public class SayToken implements WordInterface, Token {
  private String Input;
  private String Value;

  public SayToken() {
    Input = "";
  }

  public void setInput(String scannedString) {
    Input = scannedString;
  }

  public String getInput() {
    return Input;
  }

  public String getValue() {
    Value = Input.toLowerCase();
    return Value;
  }

}
//END OF FILE
//START OF FILE: src/main/startclass.java
package main;

import util.annotations.EditablePropertyNames;
import util.annotations.PropertyNames;
import util.annotations.StructurePattern;
import util.annotations.StructurePatternNames;
import util.annotations.Tags;

@Tags({ "Start" })
@StructurePattern(StructurePatternNames.BEAN_PATTERN)
@PropertyNames({ "ScannedString" })
@EditablePropertyNames({ "ScannedString" })

public class StartClass implements Token {
  private String Input;

  public StartClass() {
    Input = "{";
  }

  public void setInput(String scannedString) {
    Input = scannedString;
  }

  public String getInput() {
    return Input;
  }
}
//END OF FILE
//START OF FILE: src/main/token.java
package main;

public interface Token {
  public void setInput(String scannedString);

  public String getInput();

}
//END OF FILE
//START OF FILE: src/main/wordinterface.java
package main;

public interface WordInterface {

  public String getValue();

}
//END OF FILE
//START OF FILE: src/main/wordtoken.java
package main;

import util.annotations.EditablePropertyNames;
import util.annotations.PropertyNames;
import util.annotations.StructurePattern;
import util.annotations.StructurePatternNames;
import util.annotations.Tags;

@Tags({ "Word" })
@StructurePattern(StructurePatternNames.BEAN_PATTERN)
@PropertyNames({ "ScannedString" })
@EditablePropertyNames({ "ScannedString" })

public class WordToken implements WordInterface, Token {
  private String Input;
  private String Value;

  public WordToken() {
    Input = "";
  }

  public void setInput(String scannedString) {
    Input = scannedString;
  }

  public String getInput() {
    return Input;
  }

  public String getValue() {
    Value = Input.toLowerCase();
    return Value;
  }

}
//END OF FILE
